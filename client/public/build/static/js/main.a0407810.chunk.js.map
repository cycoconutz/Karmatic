{"version":3,"sources":["utils/helpers.js","utils/unDateFormatToUnix.js","GlobalStyles.js","GlobalComponents/Forms/Form.Styled.js","utils/mutations.js","utils/auth.js","GlobalComponents/Buttons/PrettyButton.styled.js","pages/LoginSignup/components/Forms/LoginForm.js","pages/LoginSignup/LoginSignUp.styled.js","pages/LoginSignup/Login.js","pages/LoginSignup/components/Forms/SignupForm.js","pages/LoginSignup/SignUp.js","pages/Profile/Profile.styled.js","pages/Profile/components/NeighborCard/NeighborhoodCard.styled.js","pages/Profile/components/NeighborCard/NeighborhoodCard.js","pages/Profile/components/Neighborhood/Neighborhood.styled.js","pages/Profile/components/Neighborhood/Neighborhood.js","pages/Profile/components/UserActivityInfo/UserActivityInfo.styled.js","GlobalComponents/StatusBanner/StatusBanner.styled.js","GlobalComponents/StatusBanner/StatusBanner.js","pages/Profile/components/UserActivityInfo/UserInfo.js","pages/Profile/components/ProfileActivityCard/ProfileActivityCard.styled.js","utils/queries.js","pages/Profile/components/ProfileActivityCard/ProfileActivityCard.js","pages/Profile/components/ProfileActivityCard/ProfileHelping.js","pages/Profile/components/UserActivityInfo/UserActivity.js","pages/Profile/Profile.js","pages/Dashboard/components/DashboardColumns/ColumnOne.styled.js","pages/Dashboard/components/DashboardColumns/ColumnOne.js","pages/Dashboard/components/Post/Post.styled.js","GlobalComponents/Buttons/ButtonPrimary.styled.js","pages/Dashboard/components/Forms/PostForm.styled.js","pages/Dashboard/components/Forms/EditPostForm.js","GlobalComponents/Modals/Modal.styled.js","pages/Dashboard/components/Modals/EditPostModal.js","pages/Dashboard/components/Post/Post.js","pages/Dashboard/components/DashboardColumns/ColumnTwo.styled.js","pages/Dashboard/components/Forms/PostForm.js","pages/Dashboard/components/DashboardColumns/ColumnTwo.js","pages/Dashboard/components/RecentKarma/ActiveRecentKarma.styled.js","pages/Dashboard/components/RecentKarma/RecentKarma.js","pages/Dashboard/components/RecentKarma/ActiveKarma.js","pages/Dashboard/components/DashboardColumns/ColumnThree.styled.js","pages/Dashboard/components/DashboardColumns/ColumnThree.js","pages/Dashboard/Dashboard.styled.js","pages/Dashboard/Dashboard.js","pages/Home/Home.styled.js","pages/Home/components/HomeInfo/HomeInfo.styled.js","pages/Home/components/HomeInfo/HomeInfo.js","pages/Home/Home.js","GlobalComponents/Nav/Nav.styled.js","GlobalComponents/Nav/Nav.js","GlobalComponents/Footer/Footer.styled.js","GlobalComponents/Footer/Footer.js","App.js","index.js"],"names":["module","exports","difficulty","duration","difficultyModifier","oldDate","timezoneOffSet","unixTimeStringArray","split","newUnixTime","value","year","parseInt","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","splice","join","timeAmPm","toLowerCase","hoursMinutesArray","hours","GlobalStyles","createGlobalStyle","StyledForm","styled","form","theme","colors","darkteal","darkgrey","TextInput","input","lightgrey","teal","ErrorTextInput","darkpurple","PostTextInput","div","CREATE_USER","gql","LOGIN_USER","CREATE_POST","ADD_HELPER","REMOVE_HELPER","EDIT_POST","DELETE_POST","CHANGE_KARMA","KARMAPOST_COMPLETE","decode","this","getToken","token","isTokenExpired","exp","Date","now","localStorage","removeItem","getItem","idToken","setItem","window","location","assign","reload","PrettyButton","button","lightteal","FormPrettyButton","PostPrettyButton","LoginForm","handleSubmit","handleLoginSignupToggle","useState","username","email","password","userFormData","setUserFormData","useMutation","login","showAlert","setShowAlert","handleInputChange","event","target","name","handleFormSubmit","preventDefault","currentTarget","checkValidity","stopPropagation","variables","data","Auth","console","error","handleShowAlert","onSubmit","forHtml","type","placeholder","onChange","onClick","submit","autoFocus","LoginSignUpBody","Login","handlePageChange","SignupForm","confirmPassword","createUser","userData","for","SignUp","ProfileContainer","Column","NeighborhoodColumn","ProfileInformation","ProfileHero","fonts","otherfont","NeighborhoodCardContainer","NeighborhoodCard","src","alt","groupName","Container","Neighborhood","ContainerSubRowOne","ContainerSubColumnOne","ContainerSubColumnTwo","UserContainerWide","UserContainerLong","KarmaBanner","lightpurple","LowKarmaBanner","GreatKarmaBanner","AwesomeKarmaBanner","ExcellentKarmaBanner","CommunityLeaderKarmaBanner","KarmaticHeroKarmaBanner","StatusBanner","karma","UserInfo","width","CardContainer","LogoImage","img","GET_ME","GET_USERS_KARMA","GET_ALL_KARMAPOSTS","ProfileActivityCard","useQuery","loading","me","karmaPosts","map","postTitle","address","postValue","karmaHelpers","helperUsername","ProfileHelpingCard","karmaHelping","postAuthor","UserActivity","setCurrentUserData","Profile","ColumnContainer","GreetingContainer","UserContainer","UserContainerHeader","CurrentKarmaCoinsContainer","StyledCoin","ColumnOne","logout","PostOutterContainer","PostContainer","SidebarContainer","PostProfileImage","EditButton","PostBody","PostHeader","PostAuthorHeader","PostMessage","PostBottom","PostFooter","Button","CreatePostButton","PostFormContainer","PostTitleContainer","PostTextArea","textarea","PostFormOptions","calcPostValue","require","PostForm","karmaPostData","setPostsArray","allPosts","deleteKarmaPost","setIsOpen","title","setTitle","postDescription","description","setDescription","setDifficulty","setDuration","setAddress","postId","_id","editPost","e","currentPostValue","karmaPostId","editedPost","newPostsArr","filter","post","maxLength","id","ModalBackground","ModalContainer","ModalHeader","ModalCloseButton","CreatePostModal","Post","usersKarma","isOpen","postAuthorKarma","i","users","length","populatePostKarma","JSON","stringify","addMeAsHelper","removeMeAsHelper","deletePost","completeKarmaPostMutation","refundKarma","karmaPayment","karmaHelper","helpersArray","setHelpersArray","complete","isComplete","setIsComplete","isDeleted","setIsDeleted","renderKarmaHelpers","index","addHelperToPost","loggedIn","some","author","helpers","completeKarmaPost","helperKarma","refundedUserKarma","j","createdAt","height","FeedHeaderContainer","CreatePostContainer","ActivityHeader","FeedContainer","createPost","updateKarma","newPost","updatedUserKarma","ColumnTwo","postsArray","filteredArray","reverse","RecentKarmaBox","RecentContainer","ActiveRecentContainer","ExchangeContainer","ExchangeBetween","ExchangeBetweenTop","ExchangeBetweenBottom","KarmaCoins","RecentKarma","ActiveKarma","unDateFormatToUnix","ColumnThree","setState","meData","pastDate","timeZoneOffSet","getTimezoneOffset","recentKarmaArray","recentKarmaReceivedArray","recentKarmaHelpingArray","recentPost","DashboardContainer","WideColumn","Dashboard","allKarmaPosts","HomeContainer","HomeInfoContainer","StyledHomeInfoContainer","StyledHeaderContainer","StyledHomeLogo","Rows","Row","HomeInfo","Home","StyledNavContainer","header","StyledNavImage","DisappearingNavImage","StyledNavEnd","Nav","currentPage","href","auth","StyledFooter","footer","Icons","Footer","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","purple","App","setCurrentPage","accessPage","setCurrentAccessPage","page","ApolloProvider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kFAAAA,EAAOC,QAAU,SAAuBC,EAAYC,GAChD,IAAIC,EACJ,OAAQF,GACJ,IAAK,OASL,QACIE,EAAqB,QAPzB,IAAK,SACDA,EAAqB,EACrB,MACJ,IAAK,OACDA,EAAqB,EAM7B,OADkBA,EAAqBD,EAAW,K,iBCdtDH,EAAOC,QAAU,SAACI,EAASC,GAGzB,IAAIC,EAAsBF,EAAQG,MAAM,KAGpCC,EAAc,EAoBZC,EACI,IADJA,EAEE,KAFFA,EAGC,MAHDA,EAIG,SAILC,EAAOC,SAASL,EAAoB,IAExCE,GAAgBC,GAAcC,EAAO,MAOrCF,GAAgBC,EAlCD,CACbG,IAAK,EACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,IACLC,IAAK,IACLC,IAAK,IACLC,IAAK,IACLC,IAAK,IACLC,IAAK,IACLC,IAAK,IACLC,IAAK,KAoBKjB,EAAoB,GAAGC,MAAM,IAAIiB,OAAO,EAAE,GAAGC,KAAK,KAK3Df,EAAO,IAAM,IACdF,GAAeC,GAIjBD,GAAgBC,GAAaE,SAASL,EAAoB,IAAI,GAI9D,IAAIoB,EAAWpB,EAAoB,GAAGqB,cAElCC,EAAoBtB,EAAoB,GAAGC,MAAM,KAEjDsB,EAAQlB,SAASiB,EAAkB,IAAMvB,EAgB7C,OAZa,KAAVwB,GAA6B,OAAbH,IACjBG,EAAQ,GAIM,OAAbH,IACDG,GAAS,IAGXrB,GAAgBC,EAAaoB,EAC7BrB,GAAgBC,EAbFE,SAASiB,EAAkB,M,uLC3D9BE,EAAeC,YAAH,6S,wBCAZC,EAAaC,IAAOC,KAAV,opBAMC,qBAAGC,MAAkBC,OAAOC,YAMnC,qBAAGF,MAAkBC,OAAOC,YAM5B,qBAAGF,MAAkBC,OAAOE,YAchCC,EAAYN,IAAOO,MAAV,qWACV,qBAAGL,MAAkBC,OAAOE,YAQhB,qBAAGH,MAAkBC,OAAOK,aAMnB,qBAAGN,MAAkBC,OAAOM,QAGhDC,EAAiBV,YAAOM,EAAPN,CAAH,+DACI,qBAAGE,MAAkBC,OAAOQ,cAG9CC,EAAgBZ,YAAOM,EAAPN,CAAH,kD,GAILA,IAAOa,IAAV,kE,eCzDLC,EAAcC,YAAH,sPAaXC,EAAaD,YAAH,4MAaVE,EAAcF,YAAH,mmBAuBXG,EAAaH,YAAH,gIAQVI,EAAgBJ,YAAH,sIAQbK,EAAYL,YAAH,8lBAuBTM,EAAcN,YAAH,kIASXO,EAAeP,YAAH,yKAUZQ,EAAqBR,YAAH,8I,sCCtEhB,O,4FArCb,WACE,OAAOS,KAAOC,KAAKC,c,sBAGrB,WACE,IAAMC,EAAQF,KAAKC,WAEnB,SAAOC,GAAUF,KAAKG,eAAeD,M,4BAGvC,SAAeA,GAIb,OAFgBH,KAAOG,GAEXE,IAAMC,KAAKC,MAAQ,MAC7BC,aAAaC,WAAW,aACjB,K,sBAMX,WACE,OAAOD,aAAaE,QAAQ,c,mBAG9B,SAAMC,GACJH,aAAaI,QAAQ,WAAYD,GACjCE,OAAOC,SAASC,OAAO,O,oBAGzB,WACEP,aAAaC,WAAW,YACxBI,OAAOC,SAASE,a,MClCPC,GAAezC,IAAO0C,OAAV,2XACZ,qBAAGxC,MAAkBC,OAAOE,YAKf,qBAAGH,MAAkBC,OAAOC,YAErC,qBAAGF,MAAkBC,OAAOwC,aAIjB,qBAAGzC,MAAkBC,OAAOC,YAU3CwC,GAAmB5C,YAAOyC,GAAPzC,CAAH,oEAKhB6C,GAAmB7C,YAAOyC,GAAPzC,CAAH,qE,QChBd,SAAS8C,GAAT,GAA+D,IAA1CC,EAAyC,EAAzCA,aAKhC,GALyE,EAA3BC,wBAKNC,mBAAS,CAAEC,SAAU,GAAIC,MAAO,GAAIC,SAAU,MAAtF,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAgBC,YAAYvC,GAArBwC,EAAP,oBACA,EAAkCP,oBAAS,GAA3C,mBAAOQ,EAAP,KAAkBC,EAAlB,KAGMC,EAAoB,SAACC,GACvB,MAAwBA,EAAMC,OAAtBC,EAAR,EAAQA,KAAMtF,EAAd,EAAcA,MACd8E,EAAgB,2BACTD,GADQ,kBAEVS,EAAOtF,MAIVuF,EAAgB,iDAAG,WAAOH,GAAP,0FACrBA,EAAMI,kBAIuB,IADhBJ,EAAMK,cACVC,kBACLN,EAAMI,iBACNJ,EAAMO,mBAPW,kBAWMX,EAAM,CACzBY,UAAU,eAAMf,KAZH,gBAWTgB,EAXS,EAWTA,KAIRC,GAAKd,MAAMa,EAAKb,MAAM7B,OAEtB+B,GAAa,GAjBI,kDAmBjBa,QAAQC,MAAR,MACAd,GAAa,GApBI,QAuBrBJ,EAAgB,CACZJ,SAAU,GACVE,SAAU,KAzBO,0DAAH,sDA6BhBqB,EAAkB,SAACb,GAClBA,EAAMC,QACTH,GAAa,IASjB,OACI,qCACED,EACF,gBAAC1D,EAAD,CAAY2E,SAAUX,EAAtB,UACI,wCACA,wBAAOY,QAAQ,WAAf,sBACA,eAACjE,EAAD,CACIkE,KAAK,OACLd,KAAK,WACLe,YAAY,WACZrG,MAAO6E,EAAaH,SACpB4B,SAAUnB,EACVoB,QAASN,IAIb,wBAAOE,QAAQ,WAAf,sBACA,eAACjE,EAAD,CACIkE,KAAK,WACLd,KAAK,WACLe,YAAY,WACZrG,MAAO6E,EAAaD,SACpB0B,SAAUnB,EACVoB,QAASN,IAGb,gEAEA,eAAC7B,GAAD,CAAkBoC,OAAQjC,EAA1B,sBAKJ,gBAAChD,EAAD,CAAa2E,SAAUX,EAAvB,UACI,wCACA,wBAAOY,QAAQ,WAAf,sBACA,eAACrE,EAAD,CACIsE,KAAK,OACLd,KAAK,WACLe,YAAY,WACZrG,MAAO6E,EAAaH,SACpB4B,SAAUnB,EACVsB,WAAS,IAGb,wBAAON,QAAQ,WAAf,sBACA,eAACrE,EAAD,CACIsE,KAAK,WACLd,KAAK,WACLe,YAAY,WACZrG,MAAO6E,EAAaD,SACpB0B,SAAUnB,IAEd,eAACf,GAAD,CAAkBoC,OAAQjC,EAA1B,wBC1HL,I,eAAMmC,GAAkBlF,IAAOa,IAAV,+gBAeP,qBAAGX,MAAmBC,OAAOC,YCbnC,SAAS+E,GAAT,GAAsC,IAArBC,EAAoB,EAApBA,iBAC5B,OACI,gBAACF,GAAD,WACC,eAACpC,GAAD,IACA,iCACO,gEACA,oBAAGiC,QAAS,kBAAMK,EAAiB,WAAnC,yBCCD,SAASC,GAAT,GAAgE,IAA1CtC,EAAyC,EAAzCA,aAEjC,GAF0E,EAA3BC,wBAEPC,mBAAS,CAAEC,SAAU,GAAIC,MAAO,GAAIC,SAAU,GAAIkC,gBAAiB,MAA3G,mBAAOjC,EAAP,KAAqBC,EAArB,KACA,EAAqBC,YAAYzC,GAA1ByE,EAAP,oBACA,EAAkCtC,oBAAS,GAA3C,mBAAOQ,EAAP,KAAkBC,EAAlB,KAGMC,EAAoB,SAACC,GACvB,MAAwBA,EAAMC,OAAtBC,EAAR,EAAQA,KAAMtF,EAAd,EAAcA,MACd8E,EAAgB,2BACTD,GADQ,kBAEVS,EAAOtF,MAIVuF,EAAgB,iDAAG,WAAOH,GAAP,4FACrBA,EAAMI,kBAIuB,IADhBJ,EAAMK,cACVC,kBACLN,EAAMI,iBACNJ,EAAMO,mBAPW,SAYXqB,EAAW,CACbtC,SAAUG,EAAaH,SACvBC,MAAOE,EAAaF,MACpBC,SAAUC,EAAaD,UAfV,SAiBMmC,EAAW,CAC9BnB,UAAU,eAAMoB,KAlBH,gBAiBTnB,EAjBS,EAiBTA,KAGRC,GAAKd,MAAMa,EAAKkB,WAAW5D,OApBV,kDAuBjB4C,QAAQC,MAAR,MACAd,GAAa,GAxBI,QA2BrBJ,EAAgB,CACZJ,SAAU,GACVC,MAAO,GACPC,SAAU,GACVkC,gBAAiB,KA/BA,0DAAH,sDAmChBb,EAAkB,SAACb,GACjBA,EAAMC,QACTH,GAAa,IAIlB,OACI,qCACED,EACF,gBAAC1D,EAAD,CAAY2E,SAAUX,EAAtB,UACI,0CACA,wBAAO0B,IAAI,WAAX,sBACA,eAAC/E,EAAD,CAAgBkE,KAAK,OAAOd,KAAK,WAAWe,YAAY,WACpDrG,MAAO6E,EAAaH,SACpB4B,SAAUnB,EACVoB,QAASN,IAIb,wBAAOgB,IAAI,QAAX,mBACA,eAAC/E,EAAD,CAAgBkE,KAAK,QAAQd,KAAK,QAAQe,YAAY,QAClDrG,MAAO6E,EAAaF,MACpB2B,SAAUnB,EACVoB,QAASN,IAGb,wBAAOgB,IAAI,WAAX,sBACA,eAAC/E,EAAD,CAAgBkE,KAAK,WAAWd,KAAK,WAAWe,YAAY,WACxDrG,MAAO6E,EAAaD,SACpB0B,SAAUnB,EACVoB,QAASN,IAEb,eAAC/D,EAAD,CAAgBkE,KAAK,WAAWd,KAAK,kBAAkBe,YAAY,mBAC/DrG,MAAO6E,EAAaiC,gBACpBR,SAAUnB,EACVoB,QAASN,IAGb,eAAC7B,GAAD,CAAkBoC,OAAQjC,EAA1B,4BAGA,qEAIJ,gBAAChD,EAAD,CAAY2E,SAAUX,EAAtB,UAEI,0CAEA,wBAAO0B,IAAI,WAAX,sBACI,eAACnF,EAAD,CAAWsE,KAAK,OAAOd,KAAK,WAAWe,YAAY,WAC/CrG,MAAO6E,EAAaH,SACpB4B,SAAUnB,EACVsB,WAAS,IAEjB,wBAAOQ,IAAI,QAAX,mBACI,eAACnF,EAAD,CAAWsE,KAAK,QAAQd,KAAK,QAAQe,YAAY,QAC7CrG,MAAO6E,EAAaF,MACpB2B,SAAUnB,IAElB,wBAAO8B,IAAI,WAAX,sBACA,eAACnF,EAAD,CAAWsE,KAAK,WAAWd,KAAK,WAAWe,YAAY,WACnDrG,MAAO6E,EAAaD,SACpB0B,SAAUnB,IACd,eAACrD,EAAD,CAAWsE,KAAK,WAAWd,KAAK,kBAAkBe,YAAY,mBAC1DrG,MAAO6E,EAAaiC,gBACpBR,SAAUnB,IAEd,eAACf,GAAD,CAAkBoC,OAAQjC,EAA1B,iCC7HG,SAAS2C,GAAT,GAAuC,IAArBN,EAAoB,EAApBA,iBAC7B,OACI,gBAACF,GAAD,WACI,eAACG,GAAD,IACA,iCACI,8DACA,oBAAGN,QAAS,kBAAMK,EAAiB,UAAnC,yBCPT,I,MAAMO,GAAmB3F,IAAOa,IAAV,iJAOhB+E,GAAS5F,IAAOa,IAAV,yXAOG,qBAAGX,MAAkBC,OAAOE,YAYrCwF,GAAqB7F,YAAO4F,GAAP5F,CAAH,iIASlB8F,GAAqB9F,IAAOa,IAAV,uKASlBkF,GAAc/F,IAAOa,IAAV,qRAQD,qBAAGX,MAAkB8F,MAAMC,aCrDrCC,GAA4BlG,IAAOa,IAAV,6ZAM3B,qBAAGX,MAAkBC,OAAOE,YAkB1B,qBAAGH,MAAkBC,OAAOQ,cCrB1B,SAASwF,GAAT,GAAmC,IAAR9B,EAAO,EAAPA,KACtC,OACI,gBAAC6B,GAAD,WACI,sBAAKE,IAAI,mCAAmCC,IAAI,qBAChD,6BAAIhC,EAAKiC,eCPd,I,kBAAMC,GAAYvG,IAAOa,IAAV,qKCIhBwD,GAAO,CACT,CACIiC,UAAW,YAEf,CACIA,UAAW,eAEf,CACIA,UAAW,kBAGJ,SAASE,KACpB,OACI,eAACD,GAAD,UACI,uCACI,eAACJ,GAAD,CAAkB9B,KAAMA,GAAK,KAC7B,eAAC8B,GAAD,CAAkB9B,KAAMA,GAAK,KAC7B,eAAC8B,GAAD,CAAkB9B,KAAMA,GAAK,UCrBtC,I,8BAAMkC,GAAYvG,IAAOa,IAAV,4KAQT4F,GAAqBzG,IAAOa,IAAV,4JAQlB6F,GAAwB1G,IAAOa,IAAV,mPAQjB,qBAAGX,MAAkBC,OAAOC,YAItB,qBAAGF,MAAkB8F,MAAMC,aAIrCU,GAAwB3G,IAAOa,IAAV,6OAYX,qBAAGX,MAAkB8F,MAAMC,aAIrCW,GAAoB5G,IAAOa,IAAV,yEAMjBgG,GAAoB7G,IAAOa,IAAV,wKCtDjBiG,GAAc9G,IAAOa,IAAV,sRAGE,qBAAGX,MAAkBC,OAAO4G,eACzC,qBAAG7G,MAAkBC,OAAOQ,cAOP,qBAAGT,MAAkBC,OAAO4G,eAIjDC,GAAiBhH,YAAO8G,GAAP9G,CAAH,iIAKdiH,GAAmBjH,YAAO8G,GAAP9G,CAAH,4JAIhBkH,GAAqBlH,YAAO8G,GAAP9G,CAAH,wJAIlBmH,GAAuBnH,YAAO8G,GAAP9G,CAAH,kMAGpB,qBAAGE,MAAkBC,OAAOK,aAE5B4G,GAA6BpH,YAAO8G,GAAP9G,CAAH,gMAG1B,qBAAGE,MAAkBC,OAAOK,aAE5B6G,GAA0BrH,YAAO8G,GAAP9G,CAAH,kMAGvB,qBAAGE,MAAkBC,OAAOK,aCxC1B,SAAS8G,GAAT,GAAiC,IAATjD,EAAQ,EAARA,KACnC,OAEI,cADA,CACA,sBACKA,EAAKkD,OAAS,IACX,eAACP,GAAD,0BAGE3C,EAAKkD,MAAQ,KAAOlD,EAAKkD,MAAQ,IAC/B,eAACN,GAAD,qBAGE5C,EAAKkD,OAAS,KAAOlD,EAAKkD,MAAQ,IAChC,eAACL,GAAD,uBAGE7C,EAAKkD,OAAS,KAAQlD,EAAKkD,MAAQ,KACjC,eAACJ,GAAD,yBAGE9C,EAAKkD,OAAS,MAAQlD,EAAKkD,MAAQ,IACjC,eAACH,GAAD,gCAGE/C,EAAKkD,OAAS,KACZ,eAACF,GAAD,6BAIA,8EC3BrB,SAASG,GAAT,GAAiC,IAAbhC,EAAY,EAAZA,SAC/B,OACI,eAAC,GAAD,UACI,gBAACoB,GAAD,WACI,eAACH,GAAD,UACI,eAACC,GAAD,UACI,gCAAKlB,EAAStC,SAAd,oBAOR,gBAACyD,GAAD,WACI,sBAAKP,IAAI,iCAAiCC,IAAI,cAC9C,8BAAKb,EAAS+B,WAElB,gBAACb,GAAD,WACI,yCACJ,eAACY,GAAD,CAAcjD,KAAMmB,EAAUiC,MAAM,kBCtB7C,I,oCAAMC,GAAgB1H,IAAOa,IAAV,2NACF,qBAAGX,MAAkBC,OAAOE,YASvCsH,GAAY3H,IAAO4H,IAAV,0E,IAKK5H,IAAO4H,IAAV,yE,OCZXC,GAAS9G,YAAH,qhBAuFN+G,IAjDW/G,YAAH,svBAiDUA,YAAH,iGA+EfgH,IArEYhH,YAAH,klBAwCUA,YAAH,obA6BKA,YAAH,uTCjKhB,SAASiH,KAEpB,MAA0BC,aAASJ,IAA3BK,EAAR,EAAQA,QAAS7D,EAAjB,EAAiBA,KACXmB,GAAe,OAAJnB,QAAI,IAAJA,OAAA,EAAAA,EAAM8D,KAAM,GAsB7B,OAAK3C,EAID0C,EACO,6CAKH1C,EAAS4C,WAAWC,KAAI,SAAAD,GAAU,OACtC,gBAACV,GAAD,WACI,eAACC,GAAD,CAAWvB,IAAI,6BAA6BC,IAAI,WADpD,wBAE0B+B,EAAWE,UAFrC,sBAEmEF,EAAWG,QAF9E,eAEmGH,EAAWI,UAF9G,kBAEwIJ,EAAWK,aAAaJ,KAAI,SAAAI,GAAY,OACxKA,EAAaC,eAAbD,mCAbD,KClCA,SAASE,GAAT,GAEX,OAFmD,EAAXnD,SAG3BoD,aAAaP,KAAI,SAAAO,GAAY,OAClC,gBAAClB,GAAD,WACI,eAACC,GAAD,CAAWvB,IAAI,6BAA6BC,IAAI,WADpD,2BAE6BuC,EAAaN,UAF1C,mBAEqEM,EAAaC,WAFlF,sBAEiHD,EAAaL,cCF3H,SAASO,GAAT,GAAyD,IAAjCtD,EAAgC,EAAhCA,SAAUuD,EAAsB,EAAtBA,mBAE7C,OACI,qCACI,eAAC,GAAD,UACI,gBAAClC,GAAD,WACI,wBACA,eAACmB,GAAD,CAAqBxC,SAAUA,IAC/B,wBACA,eAACmD,GAAD,CAAoBnD,SAAUA,EAAUuD,mBAAoBA,WCPjE,SAASC,KACpB,MAA0Bf,aAASJ,IAA3BK,EAAR,EAAQA,QAAS7D,EAAjB,EAAiBA,KACXmB,GAAe,OAAJnB,QAAI,IAAJA,OAAA,EAAAA,EAAM8D,KAAM,GAE7B,OAAK3C,EAID0C,EACO,6CAKP,gBAACvC,GAAD,WAEI,eAACI,GAAD,UACI,eAACyB,GAAD,CAAUhC,SAAUA,MAGxB,gBAACM,GAAD,WACA,gBAACD,GAAD,WACI,gDACA,eAACW,GAAD,OAGJ,gBAACZ,GAAD,WACI,kDACA,eAACkD,GAAD,CAActD,SAAUA,aAvBzB,KCXR,IAAMyD,GAAkBjJ,IAAOa,IAAV,uVAQX,qBAAGX,MAAkBC,OAAOC,YAYhC8I,GAAoBlJ,IAAOa,IAAV,0KAKjB,qBAAGX,MAAkBC,OAAOE,YAG5B8I,GAAgBnJ,IAAOa,IAAV,uMASbuI,GAAsBpJ,IAAOa,IAAV,oOACb,qBAAGX,MAAkB8F,MAAMC,aAIjC,qBAAG/F,MAAmBC,OAAOE,YAEnB,qBAAGH,MAAkB8F,MAAMC,aAKrCoD,GAA6BrJ,IAAOa,IAAV,yQAUhB,qBAAGX,MAAkB8F,MAAMC,aACjC,qBAAG/F,MAAmBC,OAAOC,YAIjCkJ,GAAatJ,IAAO4H,IAAV,qIAEO,qBAAG1H,MAAmBC,OAAOE,YCxD5C,SAASkJ,GAAT,GAAyC,IAApBnE,EAAmB,EAAnBA,iBAGhC,EAA0B6C,aAASJ,IAA3BK,EAAR,EAAQA,QAAS7D,EAAjB,EAAiBA,KAEXmB,GAAe,OAAJnB,QAAI,IAAJA,OAAA,EAAAA,EAAM8D,KAAM,GAG7B,OAAK3C,EAKD0C,EACO,8CAINA,GAAwB,QAAT,OAAJ7D,QAAI,IAAJA,OAAA,EAAAA,EAAM8D,KAClB7D,GAAKkF,SAIL,eAACP,GAAD,UACI,gBAACE,GAAD,WACI,gBAACD,GAAD,mBACU1D,EAAStC,SADnB,OAIA,wBAOA,gBAACmG,GAAD,WACI,eAACC,GAAD,CAAYlD,IAAI,iCAAiCC,IAAI,eACrD,8BAAKb,EAAS+B,WAElB,eAAC6B,GAAD,UACI,2CAGJ,eAAC9B,GAAD,CAAcjD,KAAMmB,IAEpB,oBAAGT,QAAS,kBAAMK,EAAiB,YAAnC,qCArCD,K,kFCnBFqE,GAAsBzJ,IAAOa,IAAV,wJAIR,qBAAGX,MAAmBC,OAAOM,QAIxCiJ,GAAgB1J,IAAOa,IAAV,6IAMb8I,GAAmB3J,IAAOa,IAAV,2LAQhB+I,GAAmB5J,IAAO4H,IAAV,uKAEL,qBAAG1H,MAAkBC,OAAOE,YAQvCwJ,GAAa7J,IAAOa,IAAV,mKACJ,qBAAGX,MAAkB8F,MAAMC,aAEjC,qBAAG/F,MAAkBC,OAAOE,YAGxB,qBAAGH,MAAkBC,OAAOwC,aAIhCmH,GAAW9J,IAAOa,IAAV,6HAMRkJ,GAAa/J,IAAOa,IAAV,6MAQA,qBAAGX,MAAkB8F,MAAMC,aAIrC+D,GAAmBhK,IAAOa,IAAV,iPAMN,qBAAGX,MAAkB8F,MAAMC,aASrCgE,GAAcjK,IAAOa,IAAV,qLAGL,qBAAGX,MAAkB8F,MAAMC,aAQjCiE,GAAalK,IAAOa,IAAV,4KAOJ,qBAAGX,MAAkB8F,MAAMC,aAIjCkE,GAAanK,IAAOa,IAAV,smBACC,qBAAGX,MAAkBC,OAAOK,aAiBxB,qBAAGN,MAAkBC,OAAOK,aASjC,qBAAGN,MAAkB8F,MAAMC,aC5HrCmE,GAASpK,IAAO0C,OAAV,qOACN,qBAAGxC,MAAkBC,OAAOE,YASxB,qBAAGH,MAAkBC,OAAOC,YAIhCiK,GAAmBrK,YAAOoK,GAAPpK,CAAH,gZAML,qBAAGE,MAAkBC,OAAOM,QAMnC,qBAAGP,MAAkBC,OAAOK,aACjB,qBAAGN,MAAkBC,OAAOC,YC3B3CkK,IDkC0BtK,YAAOqK,GAAPrK,CAAH,6GAGZ,qBAAGE,MAAkBC,OAAOK,aCrCnBR,IAAOC,KAAV,4HAOjBsK,GAAqBvK,IAAOa,IAAV,sQAQR,qBAAGX,MAAkB8F,MAAMC,aAOrCuE,GAAexK,IAAOyK,SAAV,0UAOD,qBAAGvK,MAAkBC,OAAOK,aAOnB,qBAAGN,MAAkBC,OAAOM,QAIhDiK,GAAkB1K,IAAOa,IAAV,miBAYL,qBAAGX,MAAkB8F,MAAMC,aAM/B,qBAAG/F,MAAkB8F,MAAMC,aCtDxC0E,IDgEsB3K,IAAOa,IAAV,mKACN,qBAAGX,MAAkB8F,MAAMC,aAEjC,qBAAG/F,MAAkBC,OAAOE,YAGxB,qBAAGH,MAAkBC,OAAOQ,cCtEvBiK,EAAQ,KAEf,SAASC,GAAT,GAA2F,IAAvEC,EAAsE,EAAtEA,cAAeC,EAAuD,EAAvDA,cAAeC,EAAwC,EAAxCA,SAC7D,GADqG,EAA9BC,gBAA8B,EAAbC,UAC9DjI,mBAAS,GAAD,OAAI6H,EAAcxC,aAApD,mBAAO6C,EAAP,KAAcC,EAAd,KACA,EAAsCnI,mBAAS,GAAD,OAAI6H,EAAcO,kBAAhE,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAoCtI,mBAAS,GAAD,OAAI6H,EAAc9M,aAA9D,mBAAOA,EAAP,KAAmBwN,EAAnB,KACA,EAAgCvI,mBAAS,GAAD,OAAI6H,EAAc7M,WAA1D,mBAAOA,EAAP,KAAiBwN,EAAjB,KACA,EAA8BxI,mBAAS,GAAD,OAAI6H,EAAcvC,UAAxD,mBAAOA,EAAP,KAAgBmD,EAAhB,KACMC,EAASb,EAAcc,IAC7B,EAAmBrI,YAAYnC,GAAxByK,EAAP,oBAEMnH,EAAQ,iDAAG,WAAOoH,GAAP,4FACbA,EAAE9H,iBADW,SAIH+H,EAAmBpB,GAAc3M,EAAYC,GAJ1C,SAKgB4N,EAAS,CAC9BzH,UAAW,CACP4H,YAAaL,EACbrD,UAAW6C,EACXE,gBAAiBC,EACjB9C,UAAW9J,SAASqN,GACpB9N,SAAUS,SAAST,GACnBD,WAAYA,EACZuK,QAASA,KAbR,OAKH0D,EALG,OAiBHC,EAAclB,EAASmB,QAAO,SAAAC,GAAI,OAAIA,EAAKR,MAAQK,EAAW5H,KAAKwH,SAASD,OAGlFb,EAAc,GAAD,oBAAKmB,GAAL,CAAkBD,EAAW5H,KAAKwH,YApBtC,kDAuBTtH,QAAQC,MAAR,MAvBS,0DAAH,sDA4Bd,OACI,gBAAC8F,GAAD,CAAmB5F,SAAUA,EAA7B,UACI,gBAAC6F,GAAD,WACI,eAACjK,EAAD,CACIsE,KAAK,OACLyH,UAAW,GACXxH,YAAY,QACZrG,MAAO2M,EACPrG,SAAU,SAACgH,GAAD,OAAOV,EAASU,EAAEjI,OAAOrF,UAEvC,eAAC8B,EAAD,CACIsE,KAAK,OACLyH,UAAW,GACXxH,YAAY,UACZrG,MAAO+J,EACPzD,SAAU,SAACgH,GAAD,OAAOJ,EAAWI,EAAEjI,OAAOrF,aAG7C,eAACgM,GAAD,CACI6B,UAAW,IACXzH,KAAK,OACLC,YAAY,8BACZrG,MAAO8M,EACPxG,SAAU,SAACgH,GAAD,OAAOP,EAAeO,EAAEjI,OAAOrF,UAG7C,gBAACkM,GAAD,WAEI,0BACI4B,GAAG,aACHxI,KAAK,aACLtF,MAAOR,EACP8G,SAAU,SAACgH,GAAD,OAAON,EAAcM,EAAEjI,OAAOrF,QAJ5C,UAMI,yBACIA,MAAM,OADV,kBAEA,yBACIA,MAAM,SADV,oBAGA,yBACIA,MAAM,OADV,qBAMJ,0BACI8N,GAAG,WACHxI,KAAK,aACLtF,MAAOP,EACP6G,SAAU,SAACgH,GAAD,OAAOL,EAAYK,EAAEjI,OAAOrF,QAJ1C,UAMI,yBAAQA,MAAM,IAAd,oBACA,yBAAQA,MAAM,IAAd,qBACA,yBAAQA,MAAM,IAAd,qBACA,yBAAQA,MAAM,IAAd,2BAGR,eAAC6L,GAAD,CACIzF,KAAK,SADT,qBCpGL,I,eAAM2H,GAAkBvM,IAAOa,IAAV,6TAef2L,GAAiBxM,IAAOa,IAAV,0NAWd4L,GAAczM,IAAOa,IAAV,uIAOX6L,GAAmB1M,IAAO0C,OAAV,gZAeD,qBAAGxC,MAAkBC,OAAOM,QAI5B,qBAAGP,MAAkBC,OAAOC,YCjDzC,SAASuM,GAAT,GAA+F,IAArEzB,EAAoE,EAApEA,UAAWJ,EAAyD,EAAzDA,cAAeC,EAA0C,EAA1CA,cAAeC,EAA2B,EAA3BA,SAA2B,EAAjBC,gBAIxF,OACI,eAACsB,GAAD,UACI,qCACA,gBAACC,GAAD,WACI,gBAACC,GAAD,WACI,2CACA,eAACC,GAAD,CAAkB3H,QAAS,kBAAMmG,GAAU,IAA3C,SACA,sBAAK9E,IAAI,6BAA6BC,IAAI,kBAGlD,eAAC,GAAD,CAAcyE,cAAeA,EAAeC,cAAeA,EAAeC,SAAUA,EAAUE,UAAWA,WCJtG,SAAS0B,GAAT,GAA0F,IAA1E9B,EAAyE,EAAzEA,cAAe+B,EAA0D,EAA1DA,WAAY9B,EAA8C,EAA9CA,cAAeC,EAA+B,EAA/BA,SAAUE,EAAqB,EAArBA,UAAW4B,EAAU,EAAVA,OAatFC,EAXsB,SAACjC,EAAe+B,GAEtC,IADA,IAAIE,EAAkB,EACbC,EAAI,EAAGA,EAAIH,EAAWI,MAAMC,OAAQF,IACrClC,EAAcjC,aAAegE,EAAWI,MAAMD,GAAG9J,WACjD6J,EAAkBF,EAAWI,MAAMD,GAAGzF,OAG9C,OAAOwF,EAIWI,CAAkBrC,EAAe+B,GACvDO,KAAKC,UAAUN,GAGf,MAAwBxJ,YAAYrC,GAA7BoM,EAAP,oBACA,EAA2B/J,YAAYpC,GAAhCoM,EAAP,oBACA,EAAqBhK,YAAYlC,GAA1BmM,EAAP,oBACA,EAAoCjK,YAAYhC,GAAzCkM,EAAP,oBACA,EAAsBlK,YAAYjC,GAA3BoM,EAAP,oBACA,EAAuBnK,YAAYjC,GAA5BqM,EAAP,oBAKA,EAAwC1K,mBAAS6H,EAAcrC,aAAaJ,KAAI,SAACuF,GAAD,OAAiBA,EAAYlF,mBAA7G,mBAAOmF,EAAP,KAAqBC,EAArB,KAGA,EAAoC7K,mBAAS6H,EAAciD,UAA3D,mBAAOC,EAAP,KAAmBC,EAAnB,KAGA,EAAkChL,oBAAS,GAA3C,mBAAOiL,EAAP,KAAkBC,EAAlB,KAIA,EAA0BlG,aAASJ,IAA3BK,EAAR,EAAQA,QAAS7D,EAAjB,EAAiBA,KAEXmB,GAAe,OAAJnB,QAAI,IAAJA,OAAA,EAAAA,EAAM8D,KAAM,GAG7B,IAAK3C,EACD,OAAO,KAIX,GAAI0C,EACA,OAAO,6CAuHX,IAlHA,IAAMkG,EAAqB,WAEvB,OAA4B,IAAxBP,EAAaX,OAET,6BACK,gCAKT,6BAEQW,EAAaxF,KAAI,SAACuF,EAAaS,GAE3B,OAAIA,IAAUR,EAAaX,OAAS,EAC1B,IAAN,OAAYW,EAAaQ,GAAzB,KAGM,IAAN,OAAYR,EAAaQ,UAS3CC,EAAe,iDAAG,WAAOtC,GAAP,8EAEN1H,GAAKiK,WAAajK,GAAK5C,WAAa,KAF9B,0CAIT,GAJS,iBAOfmM,QAPe,IAOfA,KAAcW,MAAK,SAACC,GAAD,OAAYA,IAAWjJ,EAAStC,YAPpC,0CASNoK,EAAc,CAChBlJ,UAAW,CAAE4H,YAAaA,KAVlB,OAaZ8B,EAAgB,GAAD,oBAAKD,GAAL,CAAmBrI,EAAStC,YAb/B,kDAmBZqB,QAAQC,MAAR,MAnBY,2DAyBN+I,EAAiB,CACnBnJ,UAAW,CAAE4H,YAAaA,KA1BlB,QA4BZ8B,EAAgB,aAAID,EAAa1B,QAAO,SAAAuC,GAAO,OAAIA,IAAYlJ,EAAStC,cA5B5D,mDAiCZqB,QAAQC,MAAR,MAjCY,kEAAH,sDAuCfmK,EAAiB,iDAAG,WAAO3C,GAAP,4FAClBgB,EAAI,EADc,kBAGZS,EAA0B,CAC5BrJ,UAAW,CAAE4H,YAAaA,KAJZ,OAMbgB,EAAI,EANS,YAMNA,EAAIlC,EAAcrC,aAAayE,QANzB,wBAOV0B,EAAc/B,EAAWI,MAAMD,GAAGzF,MAAQuD,EAActC,UACxDE,EAAiBoC,EAAcrC,aAAauE,GAAGtE,eARrC,UASRiF,EAAa,CACfvJ,UAAW,CACPlB,SAAUwF,EACVnB,MAAOqH,KAZD,QAMiC5B,IANjC,uBAiBlBiB,GAAc,GAjBI,kDAmBlB1J,QAAQC,MAAR,MAnBkB,0DAAH,sDAwBjByG,EAAe,iDAAG,uHAEVuC,EAAW,CACbpJ,UAAW,CAAE4H,YAAalB,EAAcc,OAH5B,cAKViD,EAAoBrJ,EAAS+B,MAAQuD,EAActC,UALzC,SAMVkF,EAAY,CACdtJ,UAAW,CACPlB,SAAU4H,EAAcjC,WACxBtB,MAAOsH,KATC,OAYhBV,GAAa,GAZG,gDAgBhB5J,QAAQC,MAAR,MAhBgB,yDAAH,qDAwBZsK,EAAI,EAAGA,GAAK9D,EAASkC,OAAQ4B,IAClC,IAAK9D,EAAS8D,GAAGf,SACb,OACI,gBAACtE,GAAD,YACFyE,GACE,uCACI,gBAACxE,GAAD,WACI,gBAACC,GAAD,WACI,eAACC,GAAD,CAAkBxD,IAAI,2BAA2BC,IAAI,gBACpDb,EAAStC,WAAa4H,EAAcjC,aAAemF,GAAcH,EAAa,GAEvE,uCACI,eAAChE,GAAD,CAAY9E,QAAS,kBAAM4J,EAAkB7D,EAAcc,MAA3D,sBAIA,eAAC/B,GAAD,CAAY9E,QAAS,kBAAMmG,GAAU,IAArC,kBAKA,eAACrB,GAAD,CAAY9E,QAAS,kBAAMkG,KAA3B,oBAMX6B,GAAU,eAAC,GAAD,CAAehC,cAAeA,EAAeI,UAAWA,EAAWH,cAAeA,EAAeC,SAAUA,EAAUC,gBAAiBA,OAE/IzF,EAAStC,WAAa4H,EAAcjC,YAAemF,GAAeH,EAAa,GAe/E,GAbF,uCAEI,eAAChE,GAAD,CAAY9E,QAAS,kBAAMmG,GAAU,IAArC,kBAIA,eAACrB,GAAD,CAAY9E,QAAS,kBAAMkG,KAA3B,oBAKX6B,GAAU,eAAC,GAAD,CAAehC,cAAeA,EAAeI,UAAWA,EAAWH,cAAeA,EAAeC,SAAUA,UAOlH,gBAAClB,GAAD,WAEI,gBAACC,GAAD,WACI,gBAACC,GAAD,WACA,8BAAKc,EAAcjC,aACnB,sBAAKzC,IAAI,iCAAiCC,IAAI,eAC9C,6BAAI0G,OAEJ,6BAAIjC,EAAciE,eAEtB,gBAAC9E,GAAD,WACI,6BAAIa,EAAcxC,YACjBwC,EAAcO,mBAInB,gBAACnB,GAAD,WACI,6BAAIY,EAAcvC,UAEjB/C,EAAStC,WAAa4H,EAAcjC,aAAemF,GAChD,eAACnL,GAAD,CAEAkC,QAAS,kBAAMuJ,EAAgBxD,EAAcc,MAF7C,SAGa,OAAZiC,QAAY,IAAZA,KAAcW,MAAK,SAACC,GAAD,OAAYA,IAAWjJ,EAAStC,YAC9C,mBADL,eAEa4H,EAAcjC,wBAYzCmF,GAAcH,EAAa,GAC9B,gBAAC1D,GAAD,WACI,mDAAqBiE,OAErB,6BAA+B,IAA3BtD,EAAc7M,SAAiB,iBAA8C,IAA3B6M,EAAc7M,SAAiB,gBAA6C,IAA3B6M,EAAc7M,SAAiB,UAAY,oBAClJ,6BAAiC,SAA7B6M,EAAc9M,WAAwB,OAAsC,WAA7B8M,EAAc9M,WAA0B,SAAW,SACtG,iCACI,sBAAKoI,IAAI,iCAAiCC,IAAI,OAAO2I,OAAQ,KAC5DlE,EAActC,gBAGrBwF,EACE,gBAAC7D,GAAD,WACI,gDAGCiE,IACD,iCACI,sBAAKhI,IAAI,iCAAiCC,IAAI,OAAO2I,OAAQ,KAC5DlE,EAActC,gBAIvB,gBAAC2B,GAAD,WACI,6BAA+B,IAA3BW,EAAc7M,SAAiB,iBAA8C,IAA3B6M,EAAc7M,SAAiB,gBAA6C,IAA3B6M,EAAc7M,SAAiB,UAAY,oBAClJ,6BAAiC,SAA7B6M,EAAc9M,WAAwB,OAAsC,WAA7B8M,EAAc9M,WAA0B,SAAW,SACtG,iCACI,sBAAKoI,IAAI,iCAAiCC,IAAI,OAAO2I,OAAQ,KAC5DlE,EAActC,mBAOlC0F,GACG,uCACI,gBAACxE,GAAD,WACI,eAACC,GAAD,UACI,eAACC,GAAD,CAAkBxD,IAAI,2BAA2BC,IAAI,kBAEzD,gBAACyD,GAAD,WACI,gBAACC,GAAD,WACI,8BAAKe,EAAcjC,aACnB,6BAAIiC,EAAciE,eAEtB,eAAC9E,GAAD,UACI,gEAEJ,eAACC,GAAD,UACI,+BAKZ,eAACC,GAAD,UACI,+BClUjB,I,wBAAMlB,GAAkBjJ,IAAOa,IAAV,kMAWfoO,GAAsBjP,IAAOa,IAAV,sDAKnBqO,GAAsBlP,IAAOa,IAAV,sUAKR,qBAAGX,MAAkBC,OAAOwC,aAE1B,qBAAGzC,MAAkBC,OAAOC,YASzC+O,GAAiBnP,IAAOa,IAAV,ySACd,qBAAGX,MAAmBC,OAAOE,YAIvB,qBAAGH,MAAkB8F,MAAMC,aAcjCmJ,GAAgBpP,IAAOa,IAAV,uMC9CpB8J,GAAgBC,EAAQ,IAEf,SAASC,GAAT,GAAgD,IAA5BE,EAA2B,EAA3BA,cAAeC,EAAY,EAAZA,SAGtC3G,EAAS4D,aAASJ,IAAlBxD,KAEFmB,GAAe,OAAJnB,QAAI,IAAJA,OAAA,EAAAA,EAAM8D,KAAM,GAEvBjF,EAAWsC,EAAStC,SAC1B,EAA8BD,mBAAS,IAAvC,mBAAOqF,EAAP,KAAkB8C,EAAlB,KACA,EAA0CnI,mBAAS,IAAnD,mBAAOoI,EAAP,KAAwBE,EAAxB,KACA,EAAoCtI,mBAAS,IAA7C,mBAAOjF,EAAP,KAAmBwN,EAAnB,KACA,EAAgCvI,mBAAS,IAAzC,mBAAOhF,EAAP,KAAiBwN,EAAjB,KACA,EAA8BxI,mBAAS,IAAvC,mBAAOsF,EAAP,KAAgBmD,EAAhB,KACA,EAAqBnI,YAAYtC,GAA1BoO,EAAP,oBACA,EAAsB9L,YAAYjC,GAA3BgO,EAAP,oBAEM5K,EAAQ,iDAAG,WAAOoH,GAAP,4FACbA,EAAE9H,iBADW,kBAGsB2G,GAAc3M,EAAYC,GAHhD,cAGH8N,EAHG,gBAIasD,EAAW,CAC7BjL,UAAW,CACPlB,SAAUA,EACVoF,UAAWA,EACX+C,gBAAiBA,EACjB7C,UAAWuD,EACX9N,SAAUS,SAAST,GACnBD,WAAYA,EACZuK,QAASA,KAZR,cAIHgH,EAJG,OAeTnE,EAAS,IACTG,EAAe,IAGTiE,EAAmBhK,EAAS+B,MAAQwE,EAnBjC,UAoBHuD,EAAY,CACdlL,UAAW,CACPlB,SAAUA,EACVqE,MAAOiI,KAvBN,QA0BTzE,EAAc,GAAD,oBAAKC,GAAL,CAAeuE,EAAQlL,KAAKgL,cA1BhC,kDA4BT9K,QAAQC,MAAR,MA5BS,0DAAH,sDAgCd,OACI,gBAAC8F,GAAD,CAAmB5F,SAAUA,EAA7B,UACI,gBAAC6F,GAAD,WACI,eAAC3J,EAAD,CACIgE,KAAK,OACLyH,UAAW,GACXxH,YAAY,QACZrG,MAAO8J,EACPxD,SAAU,SAACgH,GAAD,OAAOV,EAASU,EAAEjI,OAAOrF,UAEvC,eAACoC,EAAD,CACIgE,KAAK,OACLyH,UAAW,GACXxH,YAAY,UACZrG,MAAO+J,EACPzD,SAAU,SAACgH,GAAD,OAAOJ,EAAWI,EAAEjI,OAAOrF,aAG7C,eAACgM,GAAD,CACI6B,UAAW,IACXzH,KAAK,OACLC,YAAY,8BACZrG,MAAO6M,EACPvG,SAAU,SAACgH,GAAD,OAAOP,EAAeO,EAAEjI,OAAOrF,UAG7C,gBAACkM,GAAD,WACI,0BACI4B,GAAG,aACHxI,KAAK,aACLtF,MAAOR,EACP8G,SAAU,SAACgH,GAAD,OAAON,EAAcM,EAAEjI,OAAOrF,QAJ5C,UAKI,wDAEA,yBACIA,MAAM,OADV,kBAEA,yBACIA,MAAM,SADV,oBAGA,yBACIA,MAAM,OADV,qBAIJ,0BACI8N,GAAG,WACHxI,KAAK,aACLtF,MAAOP,EACP6G,SAAU,SAACgH,GAAD,OAAOL,EAAYK,EAAEjI,OAAOrF,QAJ1C,UAKI,sDACA,yBAAQA,MAAM,IAAd,oBACA,yBAAQA,MAAM,IAAd,qBACA,yBAAQA,MAAM,IAAd,qBACA,yBAAQA,MAAM,IAAd,wBAEJ,eAAC6L,GAAD,CACAzF,KAAK,SADL,+BC1GD,SAAS6K,GAAT,GAAmE,IAA9C5C,EAA6C,EAA7CA,WAAYzE,EAAiC,EAAjCA,WAAY0E,EAAqB,EAArBA,OAAQ5B,EAAa,EAAbA,UAEhE,EAAoCjI,mBAASmF,GAA7C,mBAAOsH,EAAP,KAAmB3E,EAAnB,KACM4E,EAAgBD,EAAWvD,QAAO,SAACC,GAAD,OAA4B,IAAlBA,EAAK2B,YAEvD,OADA4B,EAAcC,UAEV,gBAAC,GAAD,WACI,gBAACX,GAAD,WACI,eAACC,GAAD,UACI,eAAC,GAAD,CAAUnE,cAAeA,EAAeC,SAAU5C,MAEtD,eAAC+G,GAAD,UACI,+CAGR,eAACC,GAAD,UACKO,EAActH,KAAI,SAAC+D,GAAD,OACf,eAACQ,GAAD,CAAM9B,cAAesB,EAAqBrB,cAAeA,EAAeC,SAAU0E,EAAY7C,WAAYA,EAAYC,OAAQA,EAAQ5B,UAAWA,GAAjHkB,EAAKR,aCpBlD,I,GAAMiE,GAAiB7P,IAAOa,IAAV,yNAYdiP,GAAiB9P,IAAOa,IAAT,0OAWfkP,GAAwB/P,YAAO8P,GAAP9P,CAAH,qFAKrBgQ,GAAoBhQ,IAAOa,IAAV,2OAajBoP,GAAkBjQ,IAAOa,IAAV,6XAIf,qBAAGX,MAAkBC,OAAOC,YAEtB,qBAAGF,MAAkB8F,MAAMC,aAI7B,qBAAG/F,MAAkBC,OAAOM,QAYhCyP,GAAqBlQ,YAAOiQ,GAAPjQ,CAAH,iLASlBmQ,GAAwBnQ,YAAOiQ,GAAPjQ,CAAH,wKASrBoQ,GAAapQ,IAAOa,IAAV,yQAOA,qBAAGX,MAAkB8F,MAAMC,aCvFnC,SAASoK,GAAT,GAAyC,IAAlBvF,EAAiB,EAAjBA,cAClC,OACI,eAAC+E,GAAD,UACI,gBAACC,GAAD,WACQ,gBAACI,GAAD,WACI,qCACA,6CAKR,gBAACE,GAAD,WACI,8BAAKtF,EAActC,YACnB,sBAAKpC,IAAI,iCAAiCC,IAAI,kBAElD,gBAAC8J,GAAD,WAEQ,sCACA,6BAAIrF,EAAcjC,qBClB3B,SAASyH,GAAT,GAAyC,IAAlBxF,EAAiB,EAAjBA,cAElC,OACI,eAAC+E,GAAD,UACI,gBAACE,GAAD,WACI,eAACC,GAAD,UAEQ,6DAA+BlF,EAAcjC,WAA7C,UAAgEiC,EAAcxC,UAA9E,SAIR,gBAAC8H,GAAD,WACI,oCAAMtF,EAActC,aACpB,sBAAKpC,IAAI,iCAAiCC,IAAI,uBCd3D,I,SAAM4C,GAAkBjJ,IAAOa,IAAV,uRAUL,qBAAGX,MAAkB8F,MAAMC,aCI5CsK,GAAqB3F,EAAQ,IAGpB,SAAS4F,GAAT,GAAiC,EAAXC,SAAY,IAG7C,EAA0BxI,aAASJ,IAA3BK,EAAR,EAAQA,QAAS7D,EAAjB,EAAiBA,KAEXqM,GAAa,OAAJrM,QAAI,IAAJA,OAAA,EAAAA,EAAM8D,KAAM,GAE3B,IAAKuI,EACD,OAAO,KAIX,GAAIxI,EACA,OAAO,6CAIX,IAAMU,EAAY,OAAG8H,QAAH,IAAGA,OAAH,EAAGA,EAAQ9H,aAIvB+H,EAAW7O,KAAKC,MAAS,OAEzB6O,EAAiB,IAAI9O,KAAKA,KAAKC,OAAO8O,oBAAoB,GAG1DC,EAAmBlI,EAAauD,QAAO,SAACC,GAAD,OAAUmE,GAAmBnE,EAAK2C,UAAW6B,GAAkBD,KAEtGI,EAA2BD,EAAiB3E,QAAO,SAACC,GAAD,OAA4B,IAAlBA,EAAK2B,YAClEiD,EAA0BF,EAAiB3E,QAAO,SAACC,GAAD,OAA4B,IAAlBA,EAAK2B,YAEvE,OAEI,gBAAC,GAAD,WAGI,wBACA,yCAEoC,IAAnCiD,EAAwB9D,QACrB,gFAKH8D,EAAwB9D,OAAS,GAC9B8D,EAAwB3I,KAAI,SAAC4I,EAAY5C,GAAb,OACxB,eAACiC,GAAD,CAAaxF,cAAemG,GAA5B,sBAA4D5C,OAGpE,wBACA,yCAEqC,IAApC0C,EAAyB7D,QACtB,8DAGH6D,EAAyB7D,OAAS,GAC/B6D,EAAyB1I,KAAI,SAAC4I,EAAY5C,GAAb,OACzB,eAACgC,GAAD,CAAavF,cAAemG,GAA5B,uBAA6D5C,UC5E1E,I,MAAM6C,GAAqBlR,IAAOa,IAAV,qXAclB+E,GAAS5F,IAAOa,IAAV,8MAYNsQ,GAAanR,YAAO4F,GAAP5F,CAAH,8GClBR,SAASoR,GAAT,GAA6D,IAAxChM,EAAuC,EAAvCA,iBAAkB0H,EAAqB,EAArBA,OAAQ5B,EAAa,EAAbA,UAE1D,EAA0BjD,aAASH,IAA3BzD,EAAR,EAAQA,KAAM6D,EAAd,EAAcA,QAERE,EAAaH,aAASF,IAE5B,OAAK1D,EAID6D,EACO,6CAGNE,EAAW/D,KAKZ+D,EAAWF,QACJ,6CAMP,gBAACgJ,GAAD,WAEI,gBAAC,GAAD,WACI,eAAC3H,GAAD,CAAWnE,iBAAkBA,IAC7B,eAACoL,GAAD,OAGJ,eAACW,GAAD,UACI,eAAC1B,GAAD,CAAW5C,WAAYxI,EAAM+D,WAAYA,EAAW/D,KAAKgN,cAAejM,iBAAkBA,EAAkB0H,OAAQA,EAAQ5B,UAAWA,SAnBxI,KARA,KCfR,I,2BAAMoG,GAAgBtR,IAAOa,IAAV,4PAYb0Q,GAAoBvR,IAAOa,IAAV,qTCZjB2Q,GAA0BxR,IAAOa,IAAV,gIAQvB4Q,GAAwBzR,IAAOa,IAAV,uPAYrB6Q,GAAiB1R,IAAO4H,IAAV,oGAMd+J,GAAO3R,IAAOa,IAAV,yGAMJ+Q,GAAM5R,IAAOa,IAAV,yjBCvBD,SAASgR,GAAT,GAAuC,IAApBzM,EAAmB,EAAnBA,iBAE9B,OACI,gBAACoM,GAAD,WACI,eAACC,GAAD,UACI,eAACC,GAAD,CAAgBtL,IAAI,2CAA2CC,IAAI,oBAEvE,wBACA,gBAACsL,GAAD,WACI,gBAACC,GAAD,WACI,sBAAKxL,IAAI,4BAA4BC,IAAI,kBACzC,8QAGJ,gBAACuL,GAAD,WACA,sBAAKxL,IAAI,8BAA8BC,IAAI,wBACvC,uKAIJ,gBAACuL,GAAD,WACA,sBAAKxL,IAAI,4BAA4BC,IAAI,iBACrC,6UAIJ,gBAACuL,GAAD,WACI,yIAGA,eAACnP,GAAD,CAAcsC,QAAS,kBAAMK,EAAiB,WAA9C,8BClCL,SAAS0M,GAAT,GAAqC,IAArB1M,EAAoB,EAApBA,iBAI7B,OAHId,GAAKiK,YACPnJ,EAAiB,aAGjB,eAACkM,GAAD,UAEE,eAACC,GAAD,UACE,eAACM,GAAD,CAAUzM,iBAAkBA,QCb7B,I,MAAM2M,GAAqB/R,IAAOgS,OAAV,+VAQP,qBAAG9R,MAAkBC,OAAOE,YASvC4R,GAAkBjS,IAAO4H,IAAX,yEAKdsK,GAAuBlS,YAAOiS,GAAPjS,CAAH,+IAOpBmS,GAAgBnS,IAAOa,IAAX,sUAQD,qBAAGX,MAAkBC,OAAOK,aAInC,qBAAGN,MAAkBC,OAAOK,aCrC9B,SAAS4R,GAAT,GAAiD,IAAlCC,EAAiC,EAAjCA,YAAajN,EAAoB,EAApBA,iBACvC,OACI,gBAAC2M,GAAD,WACI,eAACG,GAAD,CAAsBnN,QAAS,kBAAMK,EAAiB,SAASgB,IAAI,oCAAoCC,IAAI,kBAE1F,YAAhBgM,EAEG,gBAACF,GAAD,WACI,eAAC1P,GAAD,CAAc6P,KAAK,UAAUvN,QAASwN,GAAK/I,OAA3C,oBACA,eAAC/G,GAAD,CAAc6P,KAAK,aAAavN,QAAS,kBAAMK,EAAiB,cAAhE,uBACA,eAAC6M,GAAD,CAAgB7L,IAAI,6BAA6BC,IAAI,uBAAuBtB,QAAS,kBAAMK,EAAiB,cAG9F,cAAhBiN,EAEE,gBAACF,GAAD,WACI,eAAC1P,GAAD,CAAc6P,KAAK,WAAWvN,QAAS,kBAAMK,EAAiB,YAA9D,qBACA,eAAC6M,GAAD,CAAgB7L,IAAI,6BAA6BC,IAAI,uBAAuBtB,QAAS,kBAAMK,EAAiB,cAG9F,UAAhBiN,EAEF,gBAACF,GAAD,WACI,eAAC1P,GAAD,CAAcsC,QAAS,kBAAMK,EAAiB,WAA9C,qBACA,eAAC6M,GAAD,CAAgBlN,QAAS,kBAAMK,EAAiB,SAASgB,IAAI,6BAA6BC,IAAI,4BAGhF,WAAhBgM,EAEF,gBAACF,GAAD,WACI,eAAC1P,GAAD,CAAcsC,QAAS,kBAAMK,EAAiB,UAA9C,mBACA,eAAC6M,GAAD,CAAgBlN,QAAS,kBAAMK,EAAiB,SAASgB,IAAI,6BAA6BC,IAAI,4BAKlG,gBAAC8L,GAAD,WACI,eAAC1P,GAAD,CAAcsC,QAAS,kBAAMK,EAAiB,UAA9C,mBACA,eAAC3C,GAAD,CAAcsC,QAAS,kBAAMK,EAAiB,WAA9C,qBACA,eAAC6M,GAAD,CAAgB7L,IAAI,6BAA6BC,IAAI,+BC3CtE,IAAMmM,GAAexS,IAAOyS,OAAV,yNAGZ,qBAAGvS,MAAkBC,OAAOE,YAS5BqS,GAAQ1S,IAAOa,IAAV,0KCVH,SAAS8R,KACpB,OACI,gBAACH,GAAD,WACI,gBAACE,GAAD,WACA,sBAAKtM,IAAI,gCAAgCC,IAAI,mBAC7C,sBAAKD,IAAI,8BAA8BC,IAAI,oBAE3C,kDCQZ,IAAMuM,GAAWC,YAAe,CAC9BC,IAAK,aAKDC,GAAWC,aAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAE1BvR,EAAQK,aAAaE,QAAQ,YAEnC,MAAO,CACLgR,QAAQ,2BACHA,GADE,IAELC,cAAexR,EAAK,iBAAaA,GAAU,SAK3CyR,GAAS,IAAIC,IAAa,CAE9BC,KAAMP,GAASQ,OAAOX,IACtBY,MAAO,IAAIC,MAGPvT,GAAQ,CACZC,OAAQ,CACNC,SAAU,UACVK,KAAM,UACNkC,UAAW,UACX+Q,OAAQ,UACR3M,YAAa,UACbpG,WAAY,UACZH,UAAW,UACXH,SAAU,WAEZ2F,MAAO,CACLC,UAAW,gBAIA,SAAS0N,KAGtB,MAA4B1Q,oBAAS,GAArC,mBAAO6J,EAAP,KAAe5B,EAAf,KAEA,EAAsCjI,mBAAS,QAA/C,mBAAOoP,EAAP,KAAoBuB,EAApB,KACA,EAA2C3Q,mBAAS,SAApD,mBAAO4Q,EAAP,KAAmBC,EAAnB,KACM1O,EAAmB,SAAC2O,GAAD,OAAUH,EAAeG,IAoBlD,OACE,qCACA,eAACC,EAAA,EAAD,CAAgBZ,OAAQA,GAAxB,SAEE,gBAAC,IAAD,CAAelT,MAAOA,GAAtB,UACE,eAACL,EAAD,IACA,eAACuS,GAAD,CAAKC,YAAaA,EAAajN,iBAAkBA,EAAkByO,WAAYA,EAAYC,qBAAsBA,IAtBjG,YAAhBzB,EAEK,eAACrJ,GAAD,IAEW,cAAhBqJ,EACK,eAACjB,GAAD,CAAWhM,iBAAkBA,EAAkB0H,OAAQA,EAAQ5B,UAAWA,IAE/D,UAAhBmH,EACK,eAAClN,GAAD,CAAOC,iBAAkBA,IAEd,WAAhBiN,EACK,eAAC3M,GAAD,CAAQN,iBAAkBA,IAE1B,eAAC0M,GAAD,CAAM1M,iBAAkBA,IAW7B,eAACuN,GAAD,WC1FRsB,IAASC,OACP,eAAC,IAAMC,WAAP,UACE,eAACR,GAAD,MAEFS,SAASC,eAAe,W","file":"static/js/main.a0407810.chunk.js","sourcesContent":["module.exports = function calcPostValue(difficulty, duration) {\r\n    let difficultyModifier;\r\n    switch (difficulty) {\r\n        case 'Easy':\r\n            difficultyModifier = 1;\r\n            break;\r\n        case 'Medium':\r\n            difficultyModifier = 2;\r\n            break;\r\n        case 'Hard':\r\n            difficultyModifier = 3;\r\n            break;\r\n        default:\r\n            difficultyModifier = 1;\r\n    };\r\n    const postValue = difficultyModifier * duration * 10;\r\n    return postValue;\r\n};","// Takes in the string exported by dateFormat.JS and converts it into a unix time stamp\r\nmodule.exports = (oldDate, timezoneOffSet) => {\r\n  // create month object\r\n  // [month, day, year, 'at', time, am/pm ]\r\n  let unixTimeStringArray = oldDate.split(' ');\r\n\r\n  // newUnixTime at 0 = January 1st 1970\r\n  let newUnixTime = 0;\r\n\r\n  // create month object. In 'days' value of days that have passed\r\n  const months = {\r\n    Jan: 0,\r\n    Feb: 31,\r\n    Mar: 59,\r\n    Apr: 90,\r\n    May: 120,\r\n    Jun: 151,\r\n    Jul: 181,\r\n    Aug: 212,\r\n    Sep: 243,\r\n    Oct: 273,\r\n    Nov: 304,\r\n    Dec: 334,\r\n  };\r\n\r\n  // Milliseconds values per minute, hour, day, month, year\r\n  // Format: 1 year = 31557600000 milliseconds\r\n  const value = {\r\n    minute: 60000,\r\n    hour: 3600000,\r\n    day: 86400000,\r\n    year : 31557600000,\r\n  }\r\n\r\n  // Adds based on year value unixTimeStringArray[2]\r\n  let year = parseInt(unixTimeStringArray[2]);\r\n  // Added 56648 to compensate for integer rounding which results ~ 8 hours missing. Integer compensates appropriately for both 2000 and 2022\r\n  newUnixTime += (value.year * (year - 1970));\r\n\r\n\r\n  // Adds based on month value unixTimeStringArray[0]\r\n  // Converts any month length to short case. Eg. January = Jan, Janu = Jan, Jan=Jan\r\n  let month = unixTimeStringArray[0].split('').splice(0,3).join('');\r\n  let monthValue = months[month];\r\n  newUnixTime += (value.day * monthValue);\r\n\r\n  // Accounts for current year being a leap year. Adds 1 day to the current time if the current year is a leap year\r\n  if(year % 4 === 0) {\r\n    newUnixTime += value.day;\r\n  }\r\n\r\n  // Adds based on day value unixTimeStringArray[1]. Subtract 1 as unixcode already has 1 day (ie. Similar to months where january = 0)\r\n  newUnixTime += (value.day * (parseInt(unixTimeStringArray[1])-1));\r\n\r\n  // Adds based on hours/minutes value unixTimeStringArray[4].\r\n  // Time value accounts for am and pm unixTimeStringArray[5]. If pm then +12 hours.\r\n  let timeAmPm = unixTimeStringArray[5].toLowerCase();\r\n  // Extrapolates minutes and hours\r\n  let hoursMinutesArray = unixTimeStringArray[4].split(':');\r\n  // hours + 5 accounts for time zone as -6 GMT\r\n  let hours = parseInt(hoursMinutesArray[0]) + timezoneOffSet;\r\n  let minutes = parseInt(hoursMinutesArray[1]);\r\n\r\n  // Accounts for midnight\r\n  if(hours === 12 && timeAmPm === 'am') {\r\n    hours = 0;\r\n  }\r\n\r\n  // Accounts for PM\r\n  if(timeAmPm === 'pm') {\r\n    hours += 12;\r\n  }\r\n\r\n  newUnixTime += (value.hour * hours);\r\n  newUnixTime += (value.minute * minutes);\r\n\r\n  return newUnixTime;\r\n};\r\n","import { createGlobalStyle } from 'styled-components'\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n* {\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    font-weight: 500;\r\n}\r\n\r\nhtml {\r\n    height: 100%;\r\n}\r\nbody {\r\n    padding: 0;\r\n    margin: 0 0 0 0;\r\n    height: 100%;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n}\r\n`\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    background-color: white;\r\n    width:99%;\r\n    border: 2px solid ${({ theme }) => theme.colors.darkteal};\r\n    border-radius: 10px;\r\n    margin-top: 1rem;\r\n    box-shadow: 3px 3px 10px rgb(0, 0 , 0, .5);\r\n\r\n    h1 {\r\n        color: ${({ theme }) => theme.colors.darkteal};\r\n        margin-top: 1rem;\r\n    }\r\n\r\n    label{\r\n        font-size:20px;\r\n        color: ${({ theme }) => theme.colors.darkgrey};\r\n        align-self: flex-start;\r\n        margin-left: 2rem;\r\n        margin-bottom: 1rem;\r\n    }\r\n\r\n    @media only screen and (min-width: 600px) {\r\n        width: 50vw;\r\n    }\r\n\r\n    @media only screen and (min-width: 992px) {\r\n        width: 25vw;\r\n    }\r\n`\r\nexport const TextInput = styled.input`\r\n    color:${({ theme }) => theme.colors.darkgrey};\r\n    width: 80%;\r\n    font-size: 16px;\r\n    padding: 1rem ;\r\n    margin-bottom: 1rem;\r\n    display: block;\r\n    border: none;\r\n    border-radius: 10px;\r\n    background-color: ${({ theme }) => theme.colors.lightgrey};\r\n    box-sizing: border-box;\r\n\r\n    &:focus {\r\n      border: none;\r\n      outline: none;\r\n      box-shadow: 0px 0px 10px ${({ theme }) => theme.colors.teal};\r\n    }\r\n`\r\nexport const ErrorTextInput = styled(TextInput)`\r\n    box-shadow: 0px 0px 10px ${({ theme }) => theme.colors.darkpurple};\r\n`\r\n\r\nexport const PostTextInput = styled(TextInput)`\r\n    padding: 0.5rem;\r\n`\r\n\r\nexport const OrDiv = styled.div`\r\n    display: flex;\r\n    width: 100%;\r\n`","import { gql } from '@apollo/client';\r\n\r\n// Creates user ** DONE **\r\nexport const CREATE_USER = gql`\r\nmutation createUser($username: String!, $email: String!, $password: String!) {\r\n  createUser(username: $username, email: $email, password: $password) {\r\n    token\r\n    user {\r\n      _id\r\n      username\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\n// Logs in user ** DONE**\r\nexport const LOGIN_USER = gql`\r\nmutation Login($username: String!, $password: String!) {\r\n  login(username: $username, password: $password) {\r\n    token\r\n    user {\r\n      _id\r\n      username\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\n// Create Post\r\nexport const CREATE_POST = gql`\r\nmutation createPost($username: String!, $postTitle: String!, $postDescription: String!, $postValue: Int!, $duration: Int!, $difficulty: String!, $address: String!) {\r\n  createPost(username: $username, postTitle: $postTitle, postDescription: $postDescription, postValue: $postValue, duration: $duration, difficulty: $difficulty, address: $address) {\r\n    _id\r\n    postAuthor\r\n    postTitle\r\n    postDescription\r\n    postValue\r\n    duration\r\n    difficulty\r\n    address\r\n    complete\r\n    createdAt\r\n    karmaHelpers {\r\n      _id\r\n      helperUsername\r\n      createdAt\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\n// Add the logged in user as a helper\r\nexport const ADD_HELPER = gql`\r\nmutation addHelper($karmaPostId: ID!) {\r\n  addHelper(karmaPostId: $karmaPostId) {\r\n    _id\r\n  }\r\n}\r\n`;\r\n\r\nexport const REMOVE_HELPER = gql`\r\nmutation removeHelper($karmaPostId: ID!) {\r\n  removeHelper(karmaPostId: $karmaPostId) {\r\n    _id\r\n  }\r\n}\r\n`;\r\n\r\nexport const EDIT_POST = gql`\r\nmutation editPost($karmaPostId: ID!, $postTitle: String, $postDescription: String, $postValue: Int, $duration: Int, $difficulty: String, $address: String) {\r\n  editPost(karmaPostId: $karmaPostId, postTitle: $postTitle, postDescription: $postDescription, postValue: $postValue, duration: $duration, difficulty: $difficulty, address: $address) {\r\n    _id\r\n    postAuthor\r\n    postTitle\r\n    postDescription\r\n    postValue\r\n    duration\r\n    difficulty\r\n    address\r\n    complete\r\n    createdAt\r\n    karmaHelpers {\r\n      _id\r\n      helperUsername\r\n      createdAt\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\n// Deletes a post\r\nexport const DELETE_POST = gql`\r\nmutation deletePost($karmaPostId: ID!) {\r\n  deletePost(karmaPostId: $karmaPostId) {\r\n    _id\r\n  }\r\n}\r\n`;\r\n\r\n//Change Karma for a User **DONE**\r\nexport const CHANGE_KARMA = gql`\r\nmutation Mutation($username: String!, $karma: Int!) {\r\n  changeKarma(username: $username, karma: $karma) {\r\n    username\r\n    karma\r\n  }\r\n}\r\n`;\r\n\r\n//Change Karmapost to compelte\r\nexport const KARMAPOST_COMPLETE = gql`\r\nmutation editPostComplete($karmaPostId: ID!) {\r\n  editPostComplete(karmaPostId: $karmaPostId) {\r\n    _id\r\n  }\r\n}\r\n`;\r\n","import decode from 'jwt-decode';\r\n\r\nclass AuthService {\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  loggedIn() {\r\n    const token = this.getToken();\r\n    // If there is a token and it's not expired, return `true`\r\n    return token && !this.isTokenExpired(token) ? true : false;\r\n  }\r\n\r\n  isTokenExpired(token) {\r\n    // Decode the token to get its expiration time that was set by the server\r\n    const decoded = decode(token);\r\n    // If the expiration time is less than the current time (in seconds), the token is expired and we return `true`\r\n    if (decoded.exp < Date.now() / 1000) {\r\n      localStorage.removeItem('id_token');\r\n      return true;\r\n    }\r\n    // If token hasn't passed its expiration time, return `false`\r\n    return false;\r\n  }\r\n\r\n  getToken() {\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    localStorage.setItem('id_token', idToken);\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem('id_token');\r\n    window.location.reload();\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","import styled from 'styled-components'\r\n\r\nexport const PrettyButton = styled.button`\r\n    color: ${({ theme }) => theme.colors.darkgrey};\r\n    font-size: 16px;\r\n    width: 110px;\r\n    padding: .75rem;\r\n    margin:.5rem;\r\n    border: .25px solid ${({ theme }) => theme.colors.darkteal};\r\n    border-radius: 10px;\r\n    background:${({ theme }) => theme.colors.lightteal};\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n        background-color: ${({ theme }) => theme.colors.darkteal};\r\n        color: white;\r\n        \r\n    }\r\n    &:active {\r\n        box-shadow: 2px 2px 5px grey;\r\n    }\r\n\r\n`\r\n\r\nexport const FormPrettyButton = styled(PrettyButton)`\r\n    margin: 1.5rem 0;\r\n    width: 80%;\r\n`\r\n\r\nexport const PostPrettyButton = styled(PrettyButton)`\r\n    margin: 2rem 1rem;\r\n    width: 40%;\r\n`","import React, { useState } from 'react';\r\nimport { StyledForm, TextInput, ErrorTextInput } from \"../../../../GlobalComponents/Forms/Form.Styled\";\r\n\r\n// Mutation imports\r\nimport { useMutation } from '@apollo/client';\r\nimport { LOGIN_USER } from '../../../../utils/mutations';\r\nimport Auth from '../../../../utils/auth';\r\n\r\n// Component imports\r\n// import SubmitButton from '../../../../GlobalComponents/Buttons/SubmitButton'\r\n// import ToggleButton from '../../../../GlobalComponents/Buttons/ToggleButton'\r\nimport { FormPrettyButton } from '../../../../GlobalComponents/Buttons/PrettyButton.styled';\r\n\r\nexport default function LoginForm({ handleSubmit, handleLoginSignupToggle }) {\r\n    // Button text content\r\n    // const toggleButtonTextContent = 'Sign Up';\r\n\r\n    // Sets hooks for userform data, and invalid info\r\n    const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\r\n    const [login] = useMutation(LOGIN_USER);\r\n    const [showAlert, setShowAlert] = useState(false);\r\n\r\n    // Updates form state based on input changes\r\n    const handleInputChange = (event) => {\r\n        const { name, value } = event.target;\r\n        setUserFormData({\r\n            ...userFormData,\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    const handleFormSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        // check if form has everything (as per react-bootstrap docs)\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n\r\n        try {\r\n            const { data } = await login({\r\n                variables: { ...userFormData },\r\n            });\r\n\r\n            Auth.login(data.login.token);\r\n            // Hides alert if previously present\r\n            setShowAlert(false);\r\n        } catch (err) {\r\n            console.error(err);\r\n            setShowAlert(true);\r\n        }\r\n\r\n        setUserFormData({\r\n            username: '',\r\n            password: '',\r\n        });\r\n    };\r\n\r\n    const handleShowAlert = (event) => {\r\n       if (event.target){\r\n        setShowAlert(false)\r\n       } \r\n    }\r\n    // const renderAlert = () => {\r\n    //     if (showAlert) {\r\n    //         return <div>Incorrect username or password</div>\r\n    //     }\r\n    // }\r\n\r\n    return (\r\n        <>\r\n        { showAlert ? \r\n        <StyledForm onSubmit={handleFormSubmit}>\r\n            <h1>Login</h1>\r\n            <label forHtml=\"username\">username</label>\r\n            <ErrorTextInput\r\n                type=\"text\"\r\n                name=\"username\"\r\n                placeholder=\"username\"\r\n                value={userFormData.username}\r\n                onChange={handleInputChange}\r\n                onClick={handleShowAlert}\r\n                \r\n            />\r\n\r\n            <label forHtml=\"password\">password</label>\r\n            <ErrorTextInput\r\n                type=\"password\"\r\n                name=\"password\"\r\n                placeholder=\"password\"\r\n                value={userFormData.password}\r\n                onChange={handleInputChange}\r\n                onClick={handleShowAlert}\r\n                \r\n            />\r\n            <p>username/password is incorrect</p>\r\n\r\n            <FormPrettyButton submit={handleSubmit} >\r\n                Login\r\n            </FormPrettyButton>\r\n        </StyledForm>\r\n        :\r\n        <StyledForm  onSubmit={handleFormSubmit}>\r\n            <h1>Login</h1>\r\n            <label forHtml=\"username\">username</label>\r\n            <TextInput\r\n                type=\"text\"\r\n                name=\"username\"\r\n                placeholder=\"username\"\r\n                value={userFormData.username}\r\n                onChange={handleInputChange}\r\n                autoFocus\r\n            />\r\n\r\n            <label forHtml=\"password\">password</label>\r\n            <TextInput\r\n                type=\"password\"\r\n                name=\"password\"\r\n                placeholder=\"password\"\r\n                value={userFormData.password}\r\n                onChange={handleInputChange}\r\n            />\r\n            <FormPrettyButton submit={handleSubmit} >\r\n                Login\r\n            </FormPrettyButton>\r\n        </StyledForm>\r\n        }\r\n        </>\r\n    );\r\n}","import styled from 'styled-components'\r\n\r\nexport const LoginSignUpBody = styled.div`\r\n    margin-top: 8rem;\r\n    display: flex;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    width: 100%;\r\n\r\n    div {\r\n        display: flex;\r\n        align-items: center;\r\n        div {\r\n            margin-right: .3rem;\r\n            \r\n        }\r\n        p {\r\n            color: ${({ theme  }) => theme.colors.darkteal}\r\n        }\r\n\r\n        p:hover {\r\n            text-decoration: underline;\r\n            cursor: pointer;\r\n        }\r\n    }\r\n\r\n\r\n    @media only screen and (min-width: 992px) {\r\n        width: 100%;\r\n    }\r\n\r\n`","import React from 'react'\r\nimport LoginForm from './components/Forms/LoginForm'\r\nimport { LoginSignUpBody } from './LoginSignUp.styled'\r\n\r\nexport default function Login({ handlePageChange }) {\r\n    return (\r\n        <LoginSignUpBody>\r\n         <LoginForm />\r\n         <div>\r\n                <div>Looking to sign up? Sign up </div>\r\n                <p onClick={() => handlePageChange('SignUp')}>Here!</p>\r\n            </div>\r\n        </LoginSignUpBody>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { StyledForm, TextInput, ErrorTextInput } from '../../../../GlobalComponents/Forms/Form.Styled'\r\n//Mutation imports\r\nimport { useMutation } from '@apollo/client';\r\nimport { CREATE_USER } from '../../../../utils/mutations';\r\nimport Auth from '../../../../utils/auth';\r\n\r\n// import SubmitButton from '../../../../GlobalComponents/Buttons/SubmitButton';\r\n// import ToggleButton from '../../../../GlobalComponents/Buttons/ToggleButton';\r\nimport { FormPrettyButton } from '../../../../GlobalComponents/Buttons/PrettyButton.styled';\r\n\r\nexport default function SignupForm({ handleSubmit, handleLoginSignupToggle }) {\r\n\r\n    const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '', confirmPassword: '' });\r\n    const [createUser] = useMutation(CREATE_USER);\r\n    const [showAlert, setShowAlert] = useState(false);\r\n\r\n\r\n    const handleInputChange = (event) => {\r\n        const { name, value } = event.target;\r\n        setUserFormData({\r\n            ...userFormData,\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    const handleFormSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        // check if form has everything (as per react-bootstrap docs)\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n\r\n        try {\r\n            // Updates user data. Need to do a \"if passwords match\" Option\r\n            const userData = {\r\n                username: userFormData.username,\r\n                email: userFormData.email,\r\n                password: userFormData.password,\r\n            }\r\n            const { data } = await createUser({\r\n                variables: { ...userData },\r\n            });\r\n            Auth.login(data.createUser.token);\r\n            // Hides alert if previously present\r\n        } catch (err) {\r\n            console.error(err);\r\n            setShowAlert(true);\r\n        }\r\n\r\n        setUserFormData({\r\n            username: '',\r\n            email: '',\r\n            password: '',\r\n            confirmPassword: '',\r\n        });\r\n    };\r\n\r\n    const handleShowAlert = (event) => {\r\n        if (event.target){\r\n         setShowAlert(false)\r\n        } \r\n     }\r\n\r\n    return (\r\n        <>\r\n        { showAlert ? \r\n        <StyledForm onSubmit={handleFormSubmit}>\r\n            <h1>Sign Up</h1>\r\n            <label for=\"username\">username</label>\r\n            <ErrorTextInput type=\"text\" name=\"username\" placeholder=\"username\"\r\n                value={userFormData.username}\r\n                onChange={handleInputChange}\r\n                onClick={handleShowAlert}\r\n                \r\n            />\r\n\r\n            <label for=\"email\">email</label>\r\n            <ErrorTextInput type=\"email\" name=\"email\" placeholder=\"email\"\r\n                value={userFormData.email}\r\n                onChange={handleInputChange}\r\n                onClick={handleShowAlert}\r\n            />\r\n\r\n            <label for=\"password\">password</label>\r\n            <ErrorTextInput type=\"password\" name=\"password\" placeholder=\"password\"\r\n                value={userFormData.password}\r\n                onChange={handleInputChange}\r\n                onClick={handleShowAlert}\r\n            />\r\n            <ErrorTextInput type=\"password\" name=\"confirmPassword\" placeholder=\"confirm password\"\r\n                value={userFormData.confirmPassword}\r\n                onChange={handleInputChange}\r\n                onClick={handleShowAlert}\r\n            />\r\n\r\n            <FormPrettyButton submit={handleSubmit}>\r\n                Create Account\r\n            </FormPrettyButton>\r\n            <p>Something went wrong, try again.</p>\r\n        </StyledForm>\r\n        : \r\n        \r\n        <StyledForm onSubmit={handleFormSubmit}>\r\n\r\n            <h1>Sign Up</h1>\r\n\r\n            <label for=\"username\">username</label>\r\n                <TextInput type=\"text\" name=\"username\" placeholder=\"username\"\r\n                    value={userFormData.username}\r\n                    onChange={handleInputChange}\r\n                    autoFocus />\r\n\r\n            <label for=\"email\">email</label>\r\n                <TextInput type=\"email\" name=\"email\" placeholder=\"email\"\r\n                    value={userFormData.email}\r\n                    onChange={handleInputChange}/>\r\n\r\n            <label for=\"password\">password</label>\r\n            <TextInput type=\"password\" name=\"password\" placeholder=\"password\"\r\n                value={userFormData.password}\r\n                onChange={handleInputChange} />\r\n            <TextInput type=\"password\" name=\"confirmPassword\" placeholder=\"confirm password\"\r\n                value={userFormData.confirmPassword}\r\n                onChange={handleInputChange} />\r\n\r\n            <FormPrettyButton submit={handleSubmit}>\r\n                Create Account\r\n            </FormPrettyButton>\r\n            \r\n    </StyledForm>\r\n        }\r\n        </>\r\n    );\r\n}","import React from 'react'\r\nimport SignupForm from './components/Forms/SignupForm'\r\nimport { LoginSignUpBody } from './LoginSignUp.styled'\r\n\r\nexport default function SignUp({ handlePageChange }) {\r\n    return (\r\n        <LoginSignUpBody>\r\n            <SignupForm />\r\n            <div>\r\n                <div>Already a Karmatic Member?</div>\r\n                <p onClick={() => handlePageChange('Login')}>Login</p>\r\n            </div>\r\n        </LoginSignUpBody>\r\n    )\r\n}","import styled from 'styled-components'\r\n\r\n\r\nexport const ProfileContainer = styled.div`\r\n    margin-top: 5rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 99%;\r\n`\r\nexport const Column = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    h3 {\r\n        border: 1px ${({ theme }) => theme.colors.darkgrey };\r\n        border-style: solid none;\r\n        text-align: center;\r\n        width: 99%;\r\n        padding: 1rem 0;\r\n        margin:0;\r\n    }\r\n\r\n    @media only screen and (min-width: 992px) {\r\n        width: 66%;\r\n    }\r\n`\r\nexport const NeighborhoodColumn = styled(Column)`\r\n    width: 100%;\r\n\r\n    @media only screen and (min-width: 992px) {\r\n        width: 33%;\r\n    }\r\n\r\n`\r\n\r\nexport const ProfileInformation = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    @media only screen and (min-width: 992px) {\r\n        flex-direction: row;\r\n    }\r\n`\r\n\r\nexport const ProfileHero = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    h3 {\r\n        margin-bottom: 0;\r\n        font-family: ${({ theme }) => theme.fonts.otherfont } ;\r\n    }\r\n\r\n    @media only screen and (min-width: 992px) {\r\n        width: 100%;\r\n    }\r\n`","import styled from \"styled-components\";\r\n\r\nexport const NeighborhoodCardContainer = styled.div`\r\n  width: 100%;\r\n  display:flex;\r\n  justify-content:space-around;\r\n  align-items: center;\r\n  text-decoration: none;\r\n  color: ${({ theme }) => theme.colors.darkgrey };\r\n  margin: .5rem;\r\n\r\n\r\n  img {\r\n    height: 33px;\r\n    margin: 0 10px;\r\n  }\r\n\r\n  p {\r\n    border: none;\r\n    background-color: white;\r\n    font-size:22px;\r\n    margin-right: 10px;\r\n  }\r\n\r\n  p:hover {\r\n    /* cursor: pointer;\r\n    color: ${({ theme }) => theme.colors.darkpurple }; */\r\n  }\r\n\r\n`\r\n\r\n","import React from \"react\";\r\nimport { NeighborhoodCardContainer } from \"./NeighborhoodCard.styled\";\r\n\r\n\r\n\r\nexport default function NeighborhoodCard({data}) {\r\n    return (\r\n        <NeighborhoodCardContainer>\r\n            <img src='./assets/images/neighborhood.png' alt='neighborhood png' />\r\n            <p>{data.groupName}</p>\r\n        </NeighborhoodCardContainer>\r\n    )\r\n}","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    margin-top: 1rem;\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n`\r\n","import React from \"react\";\r\n//Styled Components\r\n\r\nimport NeighborhoodCard from \"../NeighborCard/NeighborhoodCard\";\r\nimport { Container } from \"./Neighborhood.styled\";\r\n\r\nconst data = [\r\n    {\r\n        groupName: 'The Oaks'\r\n    },\r\n    {\r\n        groupName: 'The Springs'\r\n    },\r\n    {\r\n        groupName: 'Copper Spring'\r\n    }]\r\n\r\nexport default function Neighborhood() {\r\n    return (\r\n        <Container>\r\n            <>\r\n                <NeighborhoodCard data={data[0]} />\r\n                <NeighborhoodCard data={data[1]} />\r\n                <NeighborhoodCard data={data[2]} />\r\n            </>\r\n        </Container>\r\n    )\r\n}","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    width: 100%;\r\n    height: fit-content;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin-top:1rem;\r\n`\r\nexport const ContainerSubRowOne = styled.div`\r\n    display: flex;\r\n    width:100%;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n`\r\n\r\nexport const ContainerSubColumnOne = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    \r\n    h1 {\r\n        color: ${({ theme }) => theme.colors.darkteal};\r\n    }\r\n\r\n    h2 {\r\n        font-family: ${({ theme }) => theme.fonts.otherfont};\r\n    }\r\n`\r\n\r\nexport const ContainerSubColumnTwo = styled.div`\r\n    width:100%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    img {\r\n        height: 33px;\r\n    }\r\n\r\n    h2 {\r\n        margin: 0 1rem;\r\n        font-family: ${({ theme }) => theme.fonts.otherfont };\r\n    }\r\n`\r\n\r\nexport const UserContainerWide = styled.div`\r\n  width: 92%;\r\n  border-radius: 20px;\r\n  \r\n`\r\n\r\nexport const UserContainerLong = styled.div`\r\n  display: flex;\r\n  width: 92%;\r\n  border-radius: 20px;\r\n  margin-bottom: 1rem;\r\n  padding-top: 1rem;\r\n  flex-direction: column-reverse;\r\n`","import styled from 'styled-components'\r\n\r\nexport const KarmaBanner = styled.div`\r\n    padding: 1rem;\r\n    border-radius: 10px;\r\n    box-shadow: 3px 3px ${({ theme }) => theme.colors.lightpurple};\r\n    color: ${({ theme }) => theme.colors.darkpurple};\r\n    width: 33%;\r\n    text-align: center;\r\n    align-self: center;\r\n    margin-bottom: 2rem;\r\n\r\n    &:hover {\r\n        box-shadow: 0px 0px 5px ${({ theme }) => theme.colors.lightpurple};\r\n    }\r\n`\r\n// @William you may want to change theses colors\r\nexport const LowKarmaBanner = styled(KarmaBanner)`\r\nbackground-color: #fce043;\r\nbackground-image: linear-gradient(315deg, #fce043 0%, #fb7ba2 74%);\r\n\r\n`\r\nexport const GreatKarmaBanner = styled(KarmaBanner)`\r\n    background: rgb(226,180,229);\r\n    background: linear-gradient(39deg, rgba(226,180,229,1) 15%, rgba(234,234,234,1) 85%);\r\n`\r\nexport const AwesomeKarmaBanner = styled(KarmaBanner)`\r\n    background: rgb(34,193,195);\r\n    background: linear-gradient(0deg, rgba(34,193,195,1) 0%, rgba(253,187,45,1) 100%);\r\n`\r\nexport const ExcellentKarmaBanner = styled(KarmaBanner)`\r\n    background: rgb(131,58,180);\r\n    background: radial-gradient(circle, rgba(131,58,180,1) 0%, rgba(253,29,29,1) 50%, rgba(252,176,69,1) 100%);\r\n    color: ${({ theme }) => theme.colors.lightgrey};\r\n`\r\nexport const CommunityLeaderKarmaBanner = styled(KarmaBanner)`\r\n    background: rgb(168,94,172);\r\n    background: linear-gradient(90deg, rgba(168,94,172,1) 0%, rgba(0,161,145,1) 50%, rgba(252,176,69,1) 91%);\r\n    color: ${({ theme }) => theme.colors.lightgrey};\r\n`\r\nexport const KarmaticHeroKarmaBanner = styled(KarmaBanner)`\r\n    background: rgb(168,94,172);\r\n    background: radial-gradient(circle, rgba(168,94,172,1) 6%, rgba(224,185,185,1) 59%, rgba(0,161,145,1) 82%);\r\n    color: ${({ theme }) => theme.colors.lightgrey};\r\n`\r\n","import React from \"react\"\r\nimport { LowKarmaBanner, GreatKarmaBanner, AwesomeKarmaBanner, ExcellentKarmaBanner, CommunityLeaderKarmaBanner, KarmaticHeroKarmaBanner } from './StatusBanner.styled'\r\n\r\nexport default function StatusBanner({ data }) {\r\n    return (\r\n        // Changes color based on amount of karma coins\r\n        <>\r\n            {data.karma <= 100 ?\r\n                <LowKarmaBanner>\r\n                    Needs work!\r\n                </LowKarmaBanner>\r\n                : data.karma > 100 && data.karma < 500 ?\r\n                    <GreatKarmaBanner>\r\n                        Great!\r\n                    </GreatKarmaBanner>\r\n                    : data.karma >= 500 && data.karma < 1000 ?\r\n                        <AwesomeKarmaBanner>\r\n                            Awesome!\r\n                        </AwesomeKarmaBanner>\r\n                        : data.karma >= 1000 && data.karma < 1500 ?\r\n                            <ExcellentKarmaBanner>\r\n                                Excellent!\r\n                            </ExcellentKarmaBanner>\r\n                            : data.karma >= 1500 && data.karma < 2000 ?\r\n                                <CommunityLeaderKarmaBanner>\r\n                                    Community Leader!\r\n                                </CommunityLeaderKarmaBanner>\r\n                                : data.karma >= 1500 ?\r\n                                    <KarmaticHeroKarmaBanner>\r\n                                        Karmatic Hero!\r\n                                    </KarmaticHeroKarmaBanner>\r\n                                    :\r\n                                    <h4>Help Someone Today to Change your Status!</h4>\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\";\r\n\r\nimport { Container, ContainerSubRowOne, ContainerSubColumnOne, ContainerSubColumnTwo, UserContainerWide } from './UserActivityInfo.styled'\r\nimport StatusBanner from '../../../../GlobalComponents/StatusBanner/StatusBanner'\r\n\r\nexport default function UserInfo({ userData }) {\r\n    return (\r\n        <Container>\r\n            <UserContainerWide>\r\n                <ContainerSubRowOne>\r\n                    <ContainerSubColumnOne>\r\n                        <h1>{userData.username}'s Profile</h1>\r\n                    </ContainerSubColumnOne>\r\n                    {/* <CreatePostButtonProfile onClick={() => setIsOpen(true)}>\r\n                        Create Post\r\n                    </CreatePostButtonProfile>\r\n                    {isOpen && <CreatePostModal setIsOpen={setIsOpen} />} */}\r\n                </ContainerSubRowOne>\r\n                <ContainerSubColumnTwo>\r\n                    <img src='./assets/images/karma_coin.png' alt='coin logo' />\r\n                    <h2>{userData.karma}</h2>\r\n                </ContainerSubColumnTwo>\r\n                <ContainerSubColumnOne>\r\n                    <h2>Status</h2>\r\n                <StatusBanner data={userData} width='100px' />\r\n                </ContainerSubColumnOne>\r\n            </UserContainerWide>\r\n        </Container>\r\n    )\r\n}","import styled from 'styled-components'\r\n\r\nexport const CardContainer = styled.div`\r\n    border: solid 2px ${({ theme }) => theme.colors.darkgrey };\r\n    border-radius: 5px;\r\n    margin: 0 1rem 1rem 1rem;\r\n    display: flex;\r\n    padding: .5rem;\r\n    align-items: center;\r\n    justify-content: space-evenly;\r\n\r\n`\r\nexport const LogoImage = styled.img`\r\n    height: 44px;\r\n    margin-right: 1rem;\r\n`\r\n\r\nexport const DeleteImage = styled.img`\r\n    height: 33px;\r\n    cursor: pointer;\r\n\r\n`","import { gql } from '@apollo/client';\r\n\r\n// Gets logged in user info\r\n// This pulls everything for current user excluding password\r\n// **TIMS WORK - IN PROGRESS**\r\nexport const GET_ME = gql`\r\nquery Me {\r\n  me {\r\n    _id\r\n    username\r\n    email\r\n    karma\r\n    karmaPosts {\r\n      _id\r\n      postTitle\r\n      postAuthor\r\n      postDescription\r\n      postValue\r\n      duration\r\n      difficulty\r\n      address\r\n      complete\r\n      createdAt\r\n      karmaHelpers {\r\n        _id\r\n        helperUsername\r\n        createdAt\r\n      }\r\n    }\r\n    karmaHelping {\r\n      postAuthor\r\n      postTitle\r\n      postValue\r\n      postDescription\r\n      address\r\n      complete\r\n      createdAt\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\n// Queryies a specific user -- gets everything but email and password\r\nexport const GET_USER = gql`\r\nquery GET_USER($username: String!) {\r\n  user(username: $username) {\r\n    _id\r\n    username\r\n    karma\r\n    karmaPosts {\r\n      _id\r\n      postTitle\r\n      postDescription\r\n      postValue\r\n      duration\r\n      difficulty\r\n      complete\r\n      createdAt\r\n      karmaHelpers {\r\n        _id\r\n        helperUsername\r\n        createdAt\r\n      }\r\n    }\r\n    karmaHelping {\r\n      _id\r\n      postTitle\r\n      postDescription\r\n      postValue\r\n      duration\r\n      difficulty\r\n      createdAt\r\n      complete\r\n      karmaHelpers {\r\n        _id\r\n        helperUsername\r\n        createdAt\r\n      }\r\n    }\r\n    karmaGroups {\r\n      _id\r\n      locationName\r\n      locationGeoTag\r\n      members {\r\n        member\r\n      }\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\n// Queries karma for all users\r\nexport const GET_USERS_KARMA = gql`\r\nquery getUserKarma {\r\n  users {\r\n    username\r\n    karma\r\n  }\r\n}\r\n`;\r\n\r\n// Queries all users except password\r\nexport const GET_USERS = gql`\r\nquery Users {\r\n  users {\r\n    username\r\n    email\r\n    karma\r\n    karmaPosts {\r\n      _id\r\n      postTitle\r\n      postDescription\r\n      postValue\r\n      duration\r\n      difficulty\r\n      address\r\n      createdAt\r\n      karmaHelpers {\r\n        _id\r\n        helperUsername\r\n        createdAt\r\n      }\r\n    }\r\n    karmaHelping {\r\n      _id\r\n      postTitle\r\n      postDescription\r\n      postValue\r\n      duration\r\n      difficulty\r\n      address\r\n      createdAt\r\n      karmaHelpers {\r\n        _id\r\n        helperUsername\r\n        createdAt\r\n      }\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport const USER_KARMA_POSTS = gql`\r\nquery Me {\r\n  me {\r\n    _id\r\n    username\r\n    karmaGroups {\r\n      _id\r\n      locationName\r\n      locationGeoTag\r\n      karmaPosts {\r\n        _id\r\n        postTitle\r\n        postDescription\r\n        postValue\r\n        duration\r\n        difficulty\r\n        address\r\n        createdAt\r\n        karmaHelpers {\r\n          _id\r\n          helperUsername\r\n          createdAt\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport const GET_ALL_KARMAPOSTS = gql`\r\nquery GET_ALL_KARMAPOSTS {\r\n  allKarmaPosts {\r\n    _id\r\n    postAuthor\r\n    postTitle\r\n    postDescription\r\n    postValue\r\n    duration\r\n    difficulty\r\n    address\r\n    complete\r\n    createdAt\r\n    karmaHelpers {\r\n      _id\r\n      helperUsername\r\n      createdAt\r\n    }\r\n  }\r\n}\r\n`;","import React from \"react\";\r\nimport { CardContainer, LogoImage } from \"./ProfileActivityCard.styled\";\r\n// import ProfileHelpingCard from \"./ProfileHelping\";\r\n// Allows use for both queries and mutations from our utils folder\r\nimport { useQuery } from '@apollo/client';\r\n\r\n// Gets Queries\r\nimport { GET_ME } from '../../../../utils/queries';\r\n// import { DELETE_POST, CHANGE_KARMA } from \"../../utils/mutations\";\r\n\r\nexport default function ProfileActivityCard() {\r\n    // const [deletePost, { error, post }] = useMutation(DELETE_POST);\r\n    const { loading, data } = useQuery(GET_ME);\r\n    const userData = data?.me || {};\r\n    // const [refundKarma] = useMutation(CHANGE_KARMA);\r\n\r\n    // const deleteKarmaPost = async (userData, karmaPosts) => {\r\n    //     try {\r\n    //         console.log(userData)\r\n    //         await deletePost({\r\n    //             variables: { karmaPostId: karmaPosts._id, },\r\n    //         });\r\n    //         const refundedUserKarma = userData.karma + karmaPosts.postValue;\r\n    //         await refundKarma({\r\n    //             variables: {\r\n    //                 username: userData.username,\r\n    //                 karma: refundedUserKarma,\r\n    //             }\r\n    //         })\r\n    //     } catch (err) {\r\n    //         console.error(err);\r\n    //     }\r\n    // };;\r\n\r\n    // Returns null if userdata is not present\r\n    if (!userData) {\r\n        return null;\r\n    }\r\n    // Displays differently during loading\r\n    if (loading) {\r\n        return <h2>LOADING...</h2>;\r\n    }\r\n\r\n\r\n\r\n    return (userData.karmaPosts.map(karmaPosts => (\r\n        <CardContainer>\r\n            <LogoImage src='./assets/images/k_logo.png' alt='k logo' />\r\n            You created the job \"{karmaPosts.postTitle}\" at the location: {karmaPosts.address} , offering {karmaPosts.postValue} karma points. {karmaPosts.karmaHelpers.map(karmaHelpers => (\r\n                karmaHelpers.helperUsername + \" \" + \"has signed up to help.\"\r\n            ))}\r\n            {/* <DeleteImage src=\"./assets/images/delete.png\" onClick={() => deleteKarmaPost(userData, karmaPosts)} /> */}\r\n        </CardContainer>))\r\n    )\r\n}\r\n","import { CardContainer, LogoImage } from \"./ProfileActivityCard.styled\";\r\n\r\nexport default function ProfileHelpingCard({userData}) {\r\n\r\n    return (\r\n        userData.karmaHelping.map(karmaHelping => (\r\n            <CardContainer>\r\n                <LogoImage src='./assets/images/k_logo.png' alt='k logo' />\r\n                Signed up to help with \"{karmaHelping.postTitle}\" for the user \"{karmaHelping.postAuthor}\" at the location: {karmaHelping.address}\r\n            </CardContainer>))\r\n    )\r\n\r\n}","import React from \"react\";\r\nimport ProfileActivityCard from \"../ProfileActivityCard/ProfileActivityCard\";\r\nimport ProfileHelpingCard from \"../ProfileActivityCard/ProfileHelping\";\r\nimport { Container, UserContainerLong } from \"./UserActivityInfo.styled\";\r\n\r\n\r\nexport default function UserActivity({ userData, setCurrentUserData }) {\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <UserContainerLong>\r\n                    <hr />\r\n                    <ProfileActivityCard userData={userData} />\r\n                    <hr />\r\n                    <ProfileHelpingCard userData={userData} setCurrentUserData={setCurrentUserData} />\r\n                </UserContainerLong>\r\n            </Container>\r\n        </>\r\n    )\r\n};","import React from 'react'\r\nimport { ProfileContainer, Column, NeighborhoodColumn, ProfileHero, ProfileInformation } from './Profile.styled'\r\nimport Neighborhood from './components/Neighborhood/Neighborhood'\r\nimport UserInfo from './components/UserActivityInfo/UserInfo'\r\nimport UserActivity from './components/UserActivityInfo/UserActivity'\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_ME} from '../../utils/queries';\r\n\r\nexport default function Profile() {\r\n    const { loading, data } = useQuery(GET_ME);\r\n    const userData = data?.me || {};\r\n    // Returns null if userdata is not present\r\n    if (!userData) {\r\n        return null;\r\n    }\r\n    // Displays differently during loading\r\n    if (loading) {\r\n        return <h2>LOADING...</h2>;\r\n    }\r\n\r\n\r\n    return (\r\n        <ProfileContainer>\r\n\r\n            <ProfileHero>\r\n                <UserInfo userData={userData} />\r\n            </ProfileHero>\r\n\r\n            <ProfileInformation>\r\n            <NeighborhoodColumn>\r\n                <h3>Neighborhoods</h3>\r\n                <Neighborhood />\r\n            </NeighborhoodColumn>\r\n\r\n            <Column>\r\n                <h3>Recent Activity</h3>\r\n                <UserActivity userData={userData}/>\r\n            </Column>\r\n            </ProfileInformation>\r\n\r\n        </ProfileContainer>\r\n    )\r\n}","import styled from 'styled-components'\r\n\r\nexport const ColumnContainer = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    \r\n    p {\r\n        text-decoration: none;\r\n        color: ${({ theme }) => theme.colors.darkteal};\r\n        margin:0;\r\n    }\r\n    p:hover {\r\n        text-decoration: underline;\r\n        cursor: pointer;\r\n    }\r\n\r\n    hr {\r\n        width: 100%;\r\n    }\r\n`\r\nexport const GreetingContainer = styled.div`\r\n    border-radius: 10px;\r\n    padding: 1rem 0 1rem 0rem;\r\n    width: 100%;\r\n    text-align: center;\r\n    color: ${({ theme }) => theme.colors.darkgrey };\r\n    font-size: 20px;\r\n`\r\nexport const UserContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 66%;\r\n    padding: 2rem;\r\n    border-radius: 10px;\r\n    position: -webkit-sticky;\r\n`\r\nexport const UserContainerHeader = styled.div`\r\n    font-family: ${({ theme }) => theme.fonts.otherfont };\r\n    text-align: center;\r\n    font-size: 20px;\r\n    margin: 1rem 0;\r\n    color: ${({ theme  }) => theme.colors.darkgrey};\r\n    h2 {\r\n        font-family: ${({ theme }) => theme.fonts.otherfont };\r\n        margin: 0;\r\n        font-size: 18px;\r\n    }\r\n`\r\nexport const CurrentKarmaCoinsContainer = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 95%;\r\n    margin-top: 1rem;\r\n    \r\n    h3 {\r\n        margin: 0;\r\n        font-size: 30px;\r\n        font-family: ${({ theme }) => theme.fonts.otherfont };\r\n        color: ${({ theme  }) => theme.colors.darkteal};\r\n\r\n    }\r\n`\r\nexport const StyledCoin = styled.img`\r\n    height: 44px;\r\n    box-shadow: 0px 0px 5px ${({ theme  }) => theme.colors.darkgrey};\r\n    border-radius: 50%;\r\n    margin-right: 1rem;\r\n`\r\n\r\n","import React from 'react'\r\nimport { ColumnContainer, GreetingContainer, UserContainer, UserContainerHeader, StyledCoin, CurrentKarmaCoinsContainer } from './ColumnOne.styled'\r\nimport StatusBanner from '../../../../GlobalComponents/StatusBanner/StatusBanner'\r\n\r\n// Imports Authorization\r\nimport Auth from '../../../../utils/auth';\r\n// Allows use for both queries and mutations from our utils folder\r\nimport { useQuery } from '@apollo/client';\r\n\r\n// Gets Queries\r\nimport { GET_ME } from '../../../../utils/queries';\r\n\r\nexport default function ColumnOne({ handlePageChange}) {\r\n    // Querys username and karma\r\n    // Sets hooks for data loading\r\n    const { loading, data } = useQuery(GET_ME);\r\n\r\n    const userData = data?.me || {};\r\n\r\n    // Returns null if userdata is not present\r\n    if (!userData) {\r\n        return null;\r\n    }\r\n\r\n    // Displays differently during loading\r\n    if (loading) {\r\n        return <h2>LOADING...</h2>;\r\n    }\r\n    \r\n    // If token is not matched in DB, and DB is not querying, then assumed token is expired/no longer valid in DB and destroys token.\r\n    if (!loading && data?.me === null) {\r\n        Auth.logout();\r\n    }\r\n\r\n    return (\r\n        <ColumnContainer>\r\n            <UserContainer>\r\n                <GreetingContainer>\r\n                    Hey, {userData.username}!\r\n                </GreetingContainer>\r\n\r\n                <hr />\r\n            \r\n                {/* <UserContainerHeader>\r\n                    <h2>Current Karma</h2>\r\n                </UserContainerHeader> */}\r\n                {/* im just proud of the karmabar and dont want to delete :( */}\r\n                {/* <KarmaBar Karma={`75`}></KarmaBar> */}\r\n                <CurrentKarmaCoinsContainer>\r\n                    <StyledCoin src='./assets/images/karma_coin.png' alt='karma coin' /> \r\n                    <h3>{userData.karma}</h3>\r\n                </CurrentKarmaCoinsContainer>\r\n                <UserContainerHeader>\r\n                    <h2>Status</h2>\r\n                </UserContainerHeader>\r\n\r\n                <StatusBanner data={userData} />\r\n\r\n                <p onClick={() => handlePageChange('Profile')}>\r\n                    View Your Profile\r\n                </p>\r\n            </UserContainer>\r\n        </ColumnContainer>\r\n    )\r\n}","import styled from 'styled-components'\r\n\r\nexport const PostOutterContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin: 1rem;\r\n    border: 2px solid ${({ theme  }) => theme.colors.teal};\r\n    border-radius: 10px;\r\n`\r\n\r\nexport const PostContainer = styled.div`\r\n    height: fit-content;\r\n    border-radius: 10px 10px 0 0;\r\n    background-color: white;\r\n    display: flex;\r\n`\r\nexport const SidebarContainer = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: flex-start;\r\n    min-width: 60px;\r\n    flex-direction: column;\r\n    margin-bottom: 1rem;\r\n`\r\nexport const PostProfileImage = styled.img`\r\n    height: 44px;\r\n    border: solid 1px ${({ theme }) => theme.colors.darkgrey };\r\n    margin-left: 1rem;\r\n    padding: .5rem;\r\n    border-radius: 10px;\r\n    margin: 1rem;\r\n`\r\n\r\n\r\nexport const EditButton = styled.div`\r\n    font-family: ${({ theme }) => theme.fonts.otherfont };\r\n    font-size: 16px;\r\n    color: ${({ theme }) => theme.colors.darkgrey };\r\n\r\n    &:hover {\r\n        color: ${({ theme }) => theme.colors.lightteal };\r\n        cursor: pointer;\r\n    }\r\n`\r\nexport const PostBody = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    align-items: flex-end;\r\n`\r\nexport const PostHeader = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: space-between;\r\n\r\n    p {\r\n        font-size: 14px;\r\n        margin-right: 1rem;\r\n        font-family: ${({ theme }) => theme.fonts.otherfont };\r\n    }\r\n`\r\n\r\nexport const PostAuthorHeader = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    h3 {\r\n        font-family: ${({ theme }) => theme.fonts.otherfont };\r\n        margin-right: .5rem;\r\n    }\r\n    img {\r\n        margin-right: .5rem;\r\n        height: 18px;\r\n    }\r\n`\r\n\r\nexport const PostMessage = styled.div`\r\n    height: fit-content;\r\n    font-size: 16px;\r\n    font-family: ${({ theme }) => theme.fonts.otherfont };\r\n    width: 95%;\r\n    padding-right: 1em;\r\n\r\n    p {\r\n        margin: 0;\r\n    }\r\n`\r\nexport const PostBottom = styled.div`\r\n    display: flex;\r\n    width: 100%;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n\r\n    p {\r\n    font-family: ${({ theme }) => theme.fonts.otherfont };\r\n    }\r\n`\r\n\r\nexport const PostFooter = styled.div`\r\n    background-color: ${({ theme }) => theme.colors.lightgrey };\r\n    padding: 1rem;\r\n    border-radius: 0 0 10px 10px;\r\n    font-size: 12px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    \r\n    div {\r\n        display: flex;\r\n        align-items: center;\r\n        img {\r\n            margin-right: .5rem;\r\n        }\r\n    }\r\n\r\n    button {\r\n        background-color: ${({ theme }) => theme.colors.lightgrey } ;\r\n        border: none;\r\n        cursor: pointer;\r\n    }\r\n    button:hover {\r\n        text-decoration: underline;\r\n    }\r\n    p {\r\n        margin: 0;\r\n        font-family: ${({ theme }) => theme.fonts.otherfont };\r\n        font-size: 14px;\r\n    }\r\n`","import styled from 'styled-components'\r\n\r\nexport const Button = styled.button`\r\n    color: ${({ theme }) => theme.colors.darkgrey};\r\n    border: none;\r\n    cursor: pointer;\r\n    display: flex;\r\n    align-items: center;\r\n    font-size: 20px;\r\n    text-decoration: none;\r\n\r\n    &:hover {\r\n        color: ${({ theme }) => theme.colors.darkteal};\r\n    }\r\n`\r\n\r\nexport const CreatePostButton = styled(Button)`\r\n    border-radius:10px;\r\n    padding: .75rem;\r\n    font-size: 16px;\r\n    height: fit-content;\r\n    width: 50%;\r\n    background-color: ${({ theme }) => theme.colors.teal};\r\n    display: flex;\r\n    justify-content: center;\r\n    margin-top: 1rem;\r\n\r\n    &:hover {\r\n        color: ${({ theme }) => theme.colors.lightgrey};\r\n        background-color: ${({ theme }) => theme.colors.darkteal};\r\n    }\r\n    @media only screen and (min-width: 992px) {\r\n        margin-top: 0;\r\n    }\r\n`\r\n\r\nexport const CreatePostButtonProfile = styled(CreatePostButton)`\r\n    height: fit-content;\r\n    margin-right: 1rem;\r\n    background-color: ${({ theme }) => theme.colors.lightgrey};\r\n`\r\n","import styled from 'styled-components'\r\n\r\nexport const PostFormContainer = styled.form`\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n`\r\n\r\nexport const PostTitleContainer = styled.div`\r\n    margin-top: 1rem;\r\n    display: flex;\r\n    align-items: center;\r\n    width: 100%;\r\n\r\n    input {\r\n        width: 100%;\r\n        font-family: ${({ theme }) => theme.fonts.otherfont};\r\n        font-size: 16px;\r\n        border: none;\r\n        margin: 0 1rem;\r\n    }\r\n`\r\n\r\nexport const PostTextArea = styled.textarea`\r\n    margin: 1rem;\r\n    width: 90%;\r\n    height: fit-content;\r\n    font-size: 16px;\r\n    border: none;\r\n    resize: none;\r\n    background-color: ${({ theme }) => theme.colors.lightgrey};\r\n    border-radius: 10px;\r\n    padding: 1rem;\r\n\r\n    &:focus {\r\n      border: none;\r\n      outline: none;\r\n      box-shadow: 0px 0px 10px ${({ theme }) => theme.colors.teal};\r\n    }\r\n`\r\n\r\nexport const PostFormOptions = styled.div`\r\n    width: 90%;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n    margin-bottom: 1rem;\r\n\r\n    select {\r\n        border: none;\r\n        border-radius:5px;\r\n        padding: 0.25rem;\r\n        font-family: ${({ theme }) => theme.fonts.otherfont};\r\n        font-size: 12px;\r\n        outline: none;\r\n        height: 2rem;\r\n    }\r\n    label {\r\n    font-family: ${({ theme }) => theme.fonts.otherfont };\r\n    margin-right: 1rem;\r\n    }\r\n    \r\n    @media only screen and (min-width: 1212px) {\r\n        flex-direction: row;\r\n    }\r\n\r\n    \r\n`\r\nexport const DeleteButton = styled.div`\r\n    font-family: ${({ theme }) => theme.fonts.otherfont };\r\n    font-size: 16px;\r\n    color: ${({ theme }) => theme.colors.darkgrey };\r\n\r\n    &:hover {\r\n        color: ${({ theme }) => theme.colors.darkpurple};\r\n        cursor: pointer;\r\n    }\r\n`","import React, { useState } from 'react';\r\nimport { CreatePostButton } from '../../../../GlobalComponents/Buttons/ButtonPrimary.styled'\r\nimport { PostFormContainer, PostTitleContainer, PostTextArea, PostFormOptions, DeleteButton } from './PostForm.styled'\r\nimport { TextInput } from '../../../../GlobalComponents/Forms/Form.Styled';\r\nimport { useMutation } from '@apollo/client';\r\nimport { EDIT_POST } from '../../../../utils/mutations';\r\nconst calcPostValue = require('../../../../utils/helpers');\r\n\r\nexport default function PostForm({ karmaPostData, setPostsArray, allPosts, deleteKarmaPost, setIsOpen }) {\r\n    const [title, setTitle] = useState(`${karmaPostData.postTitle}`);\r\n    const [description, setDescription] = useState(`${karmaPostData.postDescription}`);\r\n    const [difficulty, setDifficulty] = useState(`${karmaPostData.difficulty}`);\r\n    const [duration, setDuration] = useState(`${karmaPostData.duration}`);\r\n    const [address, setAddress] = useState(`${karmaPostData.address}`);\r\n    const postId = karmaPostData._id;\r\n    const [editPost] = useMutation(EDIT_POST);\r\n\r\n    const onSubmit = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            // Uses calcPostValue helper function to calculate a new postvalue from difficulty and duration and return it\r\n            const currentPostValue = calcPostValue(difficulty, duration);\r\n            const editedPost = await editPost({\r\n                variables: {\r\n                    karmaPostId: postId,\r\n                    postTitle: title,\r\n                    postDescription: description,\r\n                    postValue: parseInt(currentPostValue),\r\n                    duration: parseInt(duration),\r\n                    difficulty: difficulty,\r\n                    address: address\r\n                }\r\n            })\r\n            // newPostsArr contains all of the posts except the one that is being edited, so that when the edited post is added back into the posts array, that id is not duplicated\r\n            const newPostsArr = allPosts.filter(post => post._id !== editedPost.data.editPost._id)\r\n\r\n            // Uses set state to refresh the posts feed with the updated post\r\n            setPostsArray([...newPostsArr, editedPost.data.editPost]);\r\n        }\r\n        catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <PostFormContainer onSubmit={onSubmit}>\r\n            <PostTitleContainer>\r\n                <TextInput\r\n                    type='text'\r\n                    maxLength={50}\r\n                    placeholder='Title'\r\n                    value={title}\r\n                    onChange={(e) => setTitle(e.target.value)}\r\n                />\r\n                <TextInput\r\n                    type='text'\r\n                    maxLength={50}\r\n                    placeholder='Address'\r\n                    value={address}\r\n                    onChange={(e) => setAddress(e.target.value)}\r\n                />\r\n            </PostTitleContainer>\r\n            <PostTextArea\r\n                maxLength={140}\r\n                type='text'\r\n                placeholder='What do you need help with?'\r\n                value={description}\r\n                onChange={(e) => setDescription(e.target.value)}\r\n\r\n            />\r\n            <PostFormOptions>\r\n                \r\n                <select\r\n                    id=\"difficulty\"\r\n                    name=\"difficulty\"\r\n                    value={difficulty}\r\n                    onChange={(e) => setDifficulty(e.target.value)} >\r\n\r\n                    <option\r\n                        value=\"Easy\">Easy</option>\r\n                    <option\r\n                        value=\"Medium\">Medium\r\n                    </option>\r\n                    <option\r\n                        value=\"Hard\">Hard\r\n                    </option>\r\n                </select>\r\n   \r\n                \r\n                <select\r\n                    id=\"duration\"\r\n                    name=\"difficulty\"\r\n                    value={duration}\r\n                    onChange={(e) => setDuration(e.target.value)}\r\n                >\r\n                    <option value=\"1\">1 Hour</option>\r\n                    <option value=\"2\">2 Hours</option>\r\n                    <option value=\"3\">3 Hours</option>\r\n                    <option value=\"4\">4 Hours</option>\r\n                </select>\r\n            </PostFormOptions>\r\n            <CreatePostButton\r\n                type='submit'>\r\n                Done\r\n            </CreatePostButton>\r\n        </PostFormContainer>\r\n    )\r\n}","import styled from 'styled-components'\r\n\r\nexport const ModalBackground = styled.div`\r\n    background-color: rgba(0, 0, 0, 0.5);\r\n    width: 100vw;\r\n    height: 100vh;\r\n    z-index: 0;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    position: absolute;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    z-index: 0;\r\n`\r\n\r\nexport const ModalContainer = styled.div`\r\n    background-color: white;\r\n    width:90%;\r\n    border-radius: 5px;\r\n    padding: 1rem;\r\n    z-index: 2;\r\n\r\n    @media only screen and (min-width: 992px) {\r\n        width: 33vw;\r\n    }\r\n`\r\nexport const ModalHeader = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: center;   \r\n    justify-content: space-between; \r\n`\r\n\r\nexport const ModalCloseButton = styled.button`\r\n    background-color: none;\r\n    border: none;\r\n    border-radius: 50%;\r\n    height: 44px;\r\n    width: 44px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    img {\r\n        height: 16px;\r\n    }\r\n    \r\n\r\n    &:hover {\r\n        background-color: ${({ theme }) => theme.colors.teal} ;\r\n        cursor: pointer;\r\n    }\r\n    &:active {\r\n        border: 2px solid ${({ theme }) => theme.colors.darkteal}\r\n    }\r\n`","import React from \"react\";\r\nimport EditPostForm from '../Forms/EditPostForm'\r\nimport { ModalBackground, ModalHeader, ModalCloseButton, ModalContainer } from '../../../../GlobalComponents/Modals/Modal.styled';\r\nimport { DeleteButton } from \"../Forms/PostForm.styled\";\r\n\r\nexport default function CreatePostModal({setIsOpen, karmaPostData, setPostsArray, allPosts, deleteKarmaPost}){\r\n    \r\n\r\n\r\n    return (\r\n        <ModalBackground>\r\n            <>\r\n            <ModalContainer>\r\n                <ModalHeader>\r\n                    <p>Edit Post</p>\r\n                    <ModalCloseButton onClick={() => setIsOpen(false)}>\r\n                    <img src=\"./assets/images/cancel.png\" alt=\"cancel x\" />\r\n                    </ModalCloseButton>\r\n                </ModalHeader>\r\n            <EditPostForm karmaPostData={karmaPostData} setPostsArray={setPostsArray} allPosts={allPosts} setIsOpen={setIsOpen}/>\r\n            </ModalContainer>\r\n            </>\r\n        </ModalBackground>\r\n    )\r\n}","import React, { useContext, useState } from 'react'\r\nimport { PostOutterContainer, PostContainer, PostBody, SidebarContainer, PostAuthorHeader, PostHeader, PostMessage, PostBottom, PostFooter, EditButton, PostProfileImage } from './Post.styled'\r\nimport { PostPrettyButton } from '../../../../GlobalComponents/Buttons/PrettyButton.styled'\r\nimport EditPostModal from '../Modals/EditPostModal'\r\n\r\n// Imports Authorization\r\nimport Auth from '../../../../utils/auth';\r\n\r\n// Imports mutations and queries\r\nimport { useQuery, useMutation } from '@apollo/client';\r\n// Gets Queries\r\nimport { GET_ME } from '../../../../utils/queries';\r\n// Gets Mutations\r\nimport { ADD_HELPER, KARMAPOST_COMPLETE, CHANGE_KARMA, DELETE_POST, REMOVE_HELPER } from '../../../../utils/mutations'\r\n\r\nexport default function Post({ karmaPostData, usersKarma, setPostsArray, allPosts, setIsOpen, isOpen }) {\r\n    // populatePostKarma finds the amount of karma for the post author and returns it\r\n    const populatePostKarma = (karmaPostData, usersKarma) => {\r\n        let postAuthorKarma = 0;\r\n        for (let i = 0; i < usersKarma.users.length; i++) {\r\n            if (karmaPostData.postAuthor === usersKarma.users[i].username) {\r\n                postAuthorKarma = usersKarma.users[i].karma\r\n            }\r\n        }\r\n        return postAuthorKarma;\r\n    };\r\n\r\n    // Uses populatePostKarma to declare a variable that can be used by the component to display the karma for the post author\r\n    let postAuthorKarma = populatePostKarma(karmaPostData, usersKarma);\r\n    JSON.stringify(postAuthorKarma);\r\n    \r\n    // Sets Mutation function\r\n    const [addMeAsHelper] = useMutation(ADD_HELPER);\r\n    const [removeMeAsHelper] = useMutation(REMOVE_HELPER);\r\n    const [deletePost] = useMutation(DELETE_POST);\r\n    const [completeKarmaPostMutation] = useMutation(KARMAPOST_COMPLETE);\r\n    const [refundKarma] = useMutation(CHANGE_KARMA);\r\n    const [karmaPayment] = useMutation(CHANGE_KARMA);\r\n    \r\n    \r\n    // Creates helpers array that sets hooks for page refresh. Get's initial helpers from karmaPostData Prop.\r\n\r\n    const [helpersArray, setHelpersArray] = useState(karmaPostData.karmaHelpers.map((karmaHelper) => karmaHelper.helperUsername));\r\n\r\n    // Creates hook to mark off completion\r\n    const [isComplete, setIsComplete] = useState(karmaPostData.complete);\r\n\r\n    // Creates hook post delete\r\n    const [isDeleted, setIsDeleted] = useState(false);\r\n    \r\n    // Querys username and karma\r\n    // Sets hooks for data loading\r\n    const { loading, data } = useQuery(GET_ME);\r\n\r\n    const userData = data?.me || {};\r\n\r\n    // Returns null if userdata is not present\r\n    if (!userData) {\r\n        return null;\r\n    }\r\n\r\n    // Displays differently during loading\r\n    if (loading) {\r\n        return <h2>LOADING...</h2>;\r\n    }\r\n    // update function \r\n    \r\n    // Renders Karma Helpers\r\n    const renderKarmaHelpers = () => {\r\n        // Finds length of Karma\r\n        if (helpersArray.length === 0) {\r\n            return (\r\n                <p>\r\n                    {'No helpers yet. Hang tight!'}\r\n                </p>\r\n            )\r\n        }\r\n        return (\r\n            <p>\r\n                {\r\n                    helpersArray.map((karmaHelper, index) => {\r\n                        // Displays names with commas, UNLESS it is the last element in the array which renders without a comma at the end\r\n                        if (index !== helpersArray.length - 1) {\r\n                            return (` ${helpersArray[index]},`);\r\n                        }\r\n                        else {\r\n                            return (` ${helpersArray[index]}`);\r\n                        }\r\n                    })\r\n                }\r\n            </p>\r\n        )\r\n    };\r\n\r\n    // Adds logged in user to karmapost as helper\r\n    const addHelperToPost = async (karmaPostId) => {\r\n        // Checks login status\r\n        const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n        if (!token) {\r\n            return false;\r\n        }\r\n        // Adds User to post and adds post to User's karmaHelping array\r\n        if (!helpersArray?.some((author) => author === userData.username)) {\r\n            try {\r\n                await addMeAsHelper({\r\n                    variables: { karmaPostId: karmaPostId }\r\n                });\r\n                // Adds new helper to hooked Array to refresh page\r\n                setHelpersArray([...helpersArray, userData.username])\r\n                // reload page after add\r\n                // window.location.reload(false)\r\n\r\n        \r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n\r\n        } else {\r\n            // Removes self from Karma Post Helper\r\n            try {\r\n                await removeMeAsHelper({\r\n                    variables: { karmaPostId: karmaPostId }\r\n                });\r\n                setHelpersArray([...helpersArray.filter(helpers => helpers !== userData.username)]);\r\n                // reload page after remove\r\n                // window.location.reload(false)\r\n\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Completes Karma Post...In-progress\r\n    const completeKarmaPost = async (karmaPostId) => {\r\n        let i = 0;\r\n        try {\r\n            await completeKarmaPostMutation({\r\n                variables: { karmaPostId: karmaPostId }\r\n            });\r\n            for (i = 0; i < karmaPostData.karmaHelpers.length; i++) {\r\n                let helperKarma = usersKarma.users[i].karma + karmaPostData.postValue;\r\n                let helperUsername = karmaPostData.karmaHelpers[i].helperUsername\r\n                await karmaPayment({\r\n                    variables: {\r\n                        username: helperUsername,\r\n                        karma: helperKarma\r\n                    }\r\n                })\r\n            }\r\n\r\n            setIsComplete(true);\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n    // Deletes Karma Post...In-progress\r\n    const deleteKarmaPost = async () => {\r\n        try {\r\n            await deletePost({\r\n                variables: { karmaPostId: karmaPostData._id }\r\n            });\r\n            const refundedUserKarma = userData.karma + karmaPostData.postValue;\r\n            await refundKarma({\r\n                variables: {\r\n                    username: karmaPostData.postAuthor,\r\n                    karma: refundedUserKarma,\r\n                }\r\n            })\r\n            setIsDeleted(true);\r\n            // reload page after delete\r\n            // window.location.reload(false)\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    \r\n\r\n\r\n\r\n    for (let j = 0; j <= allPosts.length; j++) {\r\n        if (!allPosts[j].complete) {\r\n            return (\r\n                <PostOutterContainer>\r\n            {!isDeleted &&\r\n                <>\r\n                    <PostContainer>\r\n                        <SidebarContainer>\r\n                            <PostProfileImage src='./assets/images/user.png' alt='profile pic' />\r\n                            {userData.username === karmaPostData.postAuthor && !isComplete && helpersArray[0] ?\r\n                                    // React requires parent child relationship. Must be wrapped in div or rendered as separate boolean statements\r\n                                    <>\r\n                                        <EditButton onClick={() => completeKarmaPost(karmaPostData._id)}>\r\n                                            complete\r\n                                        </EditButton>\r\n\r\n                                        <EditButton onClick={() => setIsOpen(true)}>\r\n                                            edit\r\n                                        </EditButton>\r\n\r\n                                        {/* // Delete Karma Post */}\r\n                                        <EditButton onClick={() => deleteKarmaPost()}>\r\n                                            delete\r\n                                        </EditButton>\r\n                                    \r\n                                        \r\n                            \r\n                            {isOpen && <EditPostModal karmaPostData={karmaPostData} setIsOpen={setIsOpen} setPostsArray={setPostsArray} allPosts={allPosts} deleteKarmaPost={deleteKarmaPost} />}\r\n                                    </>\r\n                            : userData.username === karmaPostData.postAuthor && !isComplete && !helpersArray[0] ?\r\n                            // React requires parent child relationship. Must be wrapped in div or rendered as separate boolean statements\r\n                            <>\r\n\r\n                                <EditButton onClick={() => setIsOpen(true)}>\r\n                                    edit\r\n                                </EditButton>\r\n                                {/* // Delete Karma Post */}\r\n                                <EditButton onClick={() => deleteKarmaPost()}>\r\n                                    delete\r\n                                </EditButton>\r\n                            \r\n                    \r\n                    {isOpen && <EditPostModal karmaPostData={karmaPostData} setIsOpen={setIsOpen} setPostsArray={setPostsArray} allPosts={allPosts}/>}\r\n                            </>\r\n                            : ''   \r\n                        }\r\n                            \r\n                        </SidebarContainer>\r\n                        \r\n                        <PostBody>\r\n\r\n                            <PostHeader>\r\n                                <PostAuthorHeader>\r\n                                <h3>{karmaPostData.postAuthor}</h3>\r\n                                <img src='./assets/images/karma_coin.png' alt='karma coin' />\r\n                                <p>{postAuthorKarma}</p>\r\n                                </PostAuthorHeader>\r\n                                <p>{karmaPostData.createdAt}</p>\r\n                            </PostHeader>\r\n                            <PostMessage>\r\n                                <p>{karmaPostData.postTitle}</p>\r\n                                {karmaPostData.postDescription}\r\n                            </PostMessage>\r\n\r\n                            {/* Address and button line */}\r\n                            <PostBottom>\r\n                                <p>{karmaPostData.address}</p>\r\n                                {/* Button to add karmaHelper if user is not the post author*/}\r\n                                {userData.username !== karmaPostData.postAuthor && !isComplete &&\r\n                                    <PostPrettyButton\r\n                                    // disabled={helpersArray?.some((author) => author === userData.username)}\r\n                                    onClick={() => addHelperToPost(karmaPostData._id)}>\r\n                                    {helpersArray?.some((author) => author === userData.username)\r\n                                        ? 'Already helping!'\r\n                                        : `Help ${karmaPostData.postAuthor}`}\r\n                                </PostPrettyButton>\r\n                                }\r\n                                {/* Buttons to allow Complete/Delete of Karma Post if post author is logged in user*/}\r\n                                \r\n\r\n                            </PostBottom>\r\n                        </PostBody>\r\n                    </PostContainer>\r\n\r\n                    {/* Checks to see if someone has been added to karmaHelpers and displays the helpers with an in progress link else it shows the stats of the post including difficulty, duration, coins */}\r\n\r\n                    { !isComplete && helpersArray[0] ?\r\n                    <PostFooter>\r\n                        <p>In progress with {renderKarmaHelpers()}</p>\r\n                        \r\n                        <p>{karmaPostData.duration === 1 ? '1 Hour or less' : karmaPostData.duration === 2 ? 'About 2 Hours' : karmaPostData.duration === 3 ? '3 Hours' : '4 Hours or more'}</p>\r\n                        <p>{karmaPostData.difficulty === 'Easy' ? 'Easy' : karmaPostData.difficulty === 'Medium' ? 'Medium' : 'Hard'}</p>\r\n                        <div>\r\n                            <img src='./assets/images/karma_coin.png' alt='coin' height={22} />\r\n                            {karmaPostData.postValue}\r\n                        </div>\r\n                    </PostFooter>\r\n                    : isComplete ?\r\n                        <PostFooter>\r\n                            <button>\r\n                                Completed\r\n                            </button>\r\n                            {renderKarmaHelpers()}\r\n                            <div>\r\n                                <img src='./assets/images/karma_coin.png' alt='coin' height={22} />\r\n                                {karmaPostData.postValue}\r\n                            </div>\r\n                        </PostFooter>\r\n                        : \r\n                        <PostFooter>\r\n                            <p>{karmaPostData.duration === 1 ? '1 Hour or less' : karmaPostData.duration === 2 ? 'About 2 Hours' : karmaPostData.duration === 3 ? '3 Hours' : '4 Hours or more'}</p>\r\n                            <p>{karmaPostData.difficulty === 'Easy' ? 'Easy' : karmaPostData.difficulty === 'Medium' ? 'Medium' : 'Hard'}</p>\r\n                            <div>\r\n                                <img src='./assets/images/karma_coin.png' alt='coin' height={22} />\r\n                                {karmaPostData.postValue}\r\n                            </div>\r\n                        </PostFooter>\r\n                    }\r\n                </>\r\n            }\r\n            {/* Displays if post is deleted */}\r\n            {isDeleted &&\r\n                <>\r\n                    <PostContainer>\r\n                        <SidebarContainer>\r\n                            <PostProfileImage src='./assets/images/user.png' alt='profile pic' />\r\n                        </SidebarContainer>\r\n                        <PostBody>\r\n                            <PostHeader>\r\n                                <h3>{karmaPostData.postAuthor}</h3>\r\n                                <p>{karmaPostData.createdAt}</p>\r\n                            </PostHeader>\r\n                            <PostMessage>\r\n                                <p>Post deleted Karma refunded!</p>\r\n                            </PostMessage>\r\n                            <PostBottom>\r\n                                <p></p>\r\n                            </PostBottom>\r\n                        </PostBody>\r\n                    </PostContainer>\r\n\r\n                    <PostFooter>\r\n                        <p></p>\r\n                    </PostFooter>\r\n                </>\r\n            }\r\n        </PostOutterContainer>\r\n\r\n\r\n            )\r\n        }\r\n    }\r\n\r\n}","import styled from 'styled-components'\r\n\r\nexport const ColumnContainer = styled.div`\r\n    margin-top: -1rem;\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    border-radius: 10px;\r\n\r\n`\r\n\r\nexport const FeedHeaderContainer = styled.div`\r\n    \r\n    width: 100%;\r\n`\r\n\r\nexport const CreatePostContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    align-items: center;\r\n    background-color: ${({ theme }) => theme.colors.lightteal};\r\n    border-radius: 0 0 5px 5px;\r\n    box-shadow: 0 0 5px ${({ theme }) => theme.colors.darkteal};\r\n\r\n    @media only screen and (min-width: 992px) {\r\n        position: fixed;\r\n        width: 50vw;\r\n    }\r\n    \r\n`\r\n\r\nexport const ActivityHeader = styled.div`\r\n    color: ${({ theme  }) => theme.colors.darkgrey};\r\n    padding-top: 1rem;\r\n    \r\n    p {\r\n    font-family: ${({ theme }) => theme.fonts.otherfont};\r\n    font-size: 20px;\r\n    margin-left: 1rem;\r\n    margin-top: 0;\r\n    padding: 0;\r\n\r\n    }\r\n    \r\n    @media only screen and (min-width: 992px) {\r\n        margin-top: 13rem;\r\n    }\r\n    \r\n`\r\n\r\nexport const FeedContainer = styled.div`\r\n    width: 100%;\r\n    height:100vh;\r\n    overflow: visible;\r\n    overflow-y: scroll;\r\n    overscroll-behavior-y: none;\r\n    display: flex;\r\n    flex-direction: column;\r\n`\r\n","import React, { useState } from 'react';\r\nimport { CreatePostButton } from '../../../../GlobalComponents/Buttons/ButtonPrimary.styled'\r\nimport { PostFormContainer, PostTitleContainer, PostTextArea, PostFormOptions } from './PostForm.styled'\r\nimport { PostTextInput } from '../../../../GlobalComponents/Forms/Form.Styled';\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { CREATE_POST, CHANGE_KARMA } from '../../../../utils/mutations';\r\nimport { GET_ME } from '../../../../utils/queries';\r\nconst calcPostValue = require('../../../../utils/helpers');\r\n\r\nexport default function PostForm({ setPostsArray, allPosts }) {\r\n    // Querys username and karma\r\n    // Sets hooks for data loading\r\n    const { data } = useQuery(GET_ME);\r\n\r\n    const userData = data?.me || {};\r\n\r\n    const username = userData.username\r\n    const [postTitle, setTitle] = useState('');\r\n    const [postDescription, setDescription] = useState('');\r\n    const [difficulty, setDifficulty] = useState('');\r\n    const [duration, setDuration] = useState('');\r\n    const [address, setAddress] = useState('');\r\n    const [createPost] = useMutation(CREATE_POST);\r\n    const [updateKarma] = useMutation(CHANGE_KARMA);\r\n\r\n    const onSubmit = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            const currentPostValue = await calcPostValue(difficulty, duration);\r\n            const newPost = await createPost({\r\n                variables: {\r\n                    username: username,\r\n                    postTitle: postTitle,\r\n                    postDescription: postDescription,\r\n                    postValue: currentPostValue,\r\n                    duration: parseInt(duration),\r\n                    difficulty: difficulty,\r\n                    address: address,\r\n                }\r\n            });\r\n            setTitle('');\r\n            setDescription('');\r\n            // setPostsArray sets the state of the posts array to include the newly created post\r\n            // Deducts Karma from User when post is created\r\n            const updatedUserKarma = userData.karma - currentPostValue;\r\n            await updateKarma({\r\n                variables: {\r\n                    username: username,\r\n                    karma: updatedUserKarma,\r\n                }\r\n            })\r\n            setPostsArray([...allPosts, newPost.data.createPost]);\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <PostFormContainer onSubmit={onSubmit}>\r\n            <PostTitleContainer>\r\n                <PostTextInput\r\n                    type='text'\r\n                    maxLength={50}\r\n                    placeholder='Title'\r\n                    value={postTitle}\r\n                    onChange={(e) => setTitle(e.target.value)}\r\n                />\r\n                <PostTextInput\r\n                    type='text'\r\n                    maxLength={50}\r\n                    placeholder='Address'\r\n                    value={address}\r\n                    onChange={(e) => setAddress(e.target.value)}\r\n                />\r\n            </PostTitleContainer>\r\n            <PostTextArea\r\n                maxLength={140}\r\n                type='text'\r\n                placeholder='What do you need help with?'\r\n                value={postDescription}\r\n                onChange={(e) => setDescription(e.target.value)}\r\n\r\n            />\r\n            <PostFormOptions>\r\n                <select\r\n                    id=\"difficulty\"\r\n                    name=\"difficulty\"\r\n                    value={difficulty}\r\n                    onChange={(e) => setDifficulty(e.target.value)} >\r\n                    <option\r\n                    >Select Difficulty</option>\r\n                    <option\r\n                        value=\"Easy\">Easy</option>\r\n                    <option\r\n                        value=\"Medium\">Medium\r\n                    </option>\r\n                    <option\r\n                        value=\"Hard\">Hard\r\n                    </option>\r\n                </select>\r\n                <select\r\n                    id=\"duration\"\r\n                    name=\"difficulty\"\r\n                    value={duration}\r\n                    onChange={(e) => setDuration(e.target.value)}>\r\n                    <option>Select Duration</option>\r\n                    <option value=\"1\">1 Hour</option>\r\n                    <option value=\"2\">2 Hours</option>\r\n                    <option value=\"3\">3 Hours</option>\r\n                    <option value=\"4\">4 Hours</option>\r\n                </select>\r\n                <CreatePostButton\r\n                type='submit'>\r\n                Create Post\r\n                </CreatePostButton>\r\n            </PostFormOptions>\r\n            \r\n        </PostFormContainer>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport Post from '../Post/Post'\r\nimport { ColumnContainer, FeedHeaderContainer, CreatePostContainer, FeedContainer, ActivityHeader } from './ColumnTwo.styled'\r\nimport PostForm from '../Forms/PostForm'\r\n\r\nexport default function ColumnTwo({ usersKarma, karmaPosts, isOpen, setIsOpen }) {\r\n    // posts array usestate is passed down to child components so they can update the post feed when new posts are created or edited\r\n    const [postsArray, setPostsArray] = useState(karmaPosts);\r\n    const filteredArray = postsArray.filter((post) => post.complete !== true)\r\n    filteredArray.reverse();\r\n    return (\r\n        <ColumnContainer>\r\n            <FeedHeaderContainer>\r\n                <CreatePostContainer>\r\n                    <PostForm setPostsArray={setPostsArray} allPosts={karmaPosts} />\r\n                </CreatePostContainer>\r\n                <ActivityHeader>\r\n                    <p>Activity</p>\r\n                </ActivityHeader>\r\n            </FeedHeaderContainer>\r\n            <FeedContainer>\r\n                {filteredArray.map((post) =>\r\n                    <Post karmaPostData={post} key={post._id} setPostsArray={setPostsArray} allPosts={postsArray} usersKarma={usersKarma} isOpen={isOpen} setIsOpen={setIsOpen}/>\r\n                )}\r\n            </FeedContainer>\r\n        </ColumnContainer>\r\n    )\r\n}","import styled from 'styled-components'\r\n\r\nexport const RecentKarmaBox = styled.div`\r\n    \r\n    border-radius: 10px;\r\n    margin-bottom: .5rem;\r\n    width: 95%;\r\n    margin-bottom: 2rem;\r\n\r\n    @media only screen and (min-width: 992px) {\r\n        width: 80%;\r\n    }\r\n    \r\n`\r\nexport const RecentContainer =styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    margin:0;\r\n    width: 100%;\r\n\r\n    @media only screen and (min-width: 992px) {\r\n        flex-direction: column;\r\n        align-items: center;\r\n    }\r\n`\r\nexport const ActiveRecentContainer = styled(RecentContainer)`\r\n    flex-direction: column;\r\n    align-items: center;\r\n`\r\n\r\nexport const ExchangeContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 0;\r\n    text-align: center;\r\n    width: 100%;\r\n    @media only screen and (min-width: 992px) {\r\n        justify-content: space-evenly;\r\n    }\r\n`\r\n\r\n\r\n\r\nexport const ExchangeBetween = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    line-height:0;\r\n    color: ${({ theme }) => theme.colors.darkteal};\r\n    font-size: 14px;\r\n    font-family: ${({ theme }) => theme.fonts.otherfont};\r\n    margin: 0;\r\n\r\n    h4 {\r\n        color: ${({ theme }) => theme.colors.teal};\r\n        margin: 0 .25rem;\r\n        \r\n    }\r\n    p {\r\n        margin: 0 .5rem;\r\n    }\r\n\r\n    @media only screen and (min-width: 992px) {\r\n        align-items: center;\r\n    }\r\n`\r\nexport const ExchangeBetweenTop = styled(ExchangeBetween)`\r\n   \r\n    \r\n    @media only screen and (min-width: 992px) {\r\n        margin: .5rem 0;\r\n        display: flex;\r\n        align-items: center;\r\n    }\r\n`\r\nexport const ExchangeBetweenBottom = styled(ExchangeBetween)`\r\n\r\n    @media only screen and (min-width: 992px) {\r\n        margin: .5rem 0;\r\n        display: flex;\r\n        align-items: center;\r\n    }\r\n`\r\n\r\nexport const KarmaCoins = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    margin: 0;\r\n\r\n    h1 { \r\n        margin: 0 .5rem;\r\n        font-family: ${({ theme }) => theme.fonts.otherfont};\r\n        font-size: 24px;\r\n    }\r\n\r\n    img {\r\n        margin: .5rem .5rem;;\r\n        height: 33px;\r\n    }\r\n`","import React from 'react'\r\nimport { RecentKarmaBox, PostTitle, ExchangeBetweenTop, ExchangeBetweenBottom, KarmaCoins, RecentContainer } from './ActiveRecentKarma.styled'\r\n\r\nexport default function RecentKarma({ karmaPostData }) {\r\n    return (\r\n        <RecentKarmaBox>\r\n            <RecentContainer>\r\n                    <ExchangeBetweenTop>\r\n                        <p>You</p>\r\n                        <p>received</p>\r\n                    </ExchangeBetweenTop>\r\n                    {/* Displays posttitle */}\r\n                \r\n                {/* Displays Karma Coins */}\r\n                <KarmaCoins>\r\n                    <h1>{karmaPostData.postValue}</h1>\r\n                    <img src='./assets/images/karma_coin.png' alt='karma coin' />\r\n                </KarmaCoins>\r\n                <ExchangeBetweenBottom>\r\n                        {/* Displays postauthor */}\r\n                        <p>from</p>\r\n                        <p>{karmaPostData.postAuthor}</p>\r\n                    </ExchangeBetweenBottom>\r\n                    {/* <PostTitle>\r\n                <p>for</p>\r\n                <h4>{karmaPostData.postTitle}</h4>\r\n            </PostTitle> */}\r\n            </RecentContainer>\r\n            \r\n        </RecentKarmaBox>\r\n    )\r\n}","import React from 'react'\r\nimport { RecentKarmaBox, ExchangeContainer, KarmaCoins, ActiveRecentContainer } from './ActiveRecentKarma.styled'\r\n\r\nexport default function ActiveKarma({ karmaPostData }) {\r\n\r\n    return (\r\n        <RecentKarmaBox>\r\n            <ActiveRecentContainer>\r\n                <ExchangeContainer>\r\n\r\n                        <h4>You are currently helping {karmaPostData.postAuthor} with '{karmaPostData.postTitle}'</h4>\r\n                \r\n                </ExchangeContainer>\r\n\r\n                <KarmaCoins>\r\n                    <h1> {karmaPostData.postValue}</h1>\r\n                    <img src='./assets/images/karma_coin.png' alt='karma coin' />\r\n                    \r\n                </KarmaCoins>\r\n            </ActiveRecentContainer>\r\n        </RecentKarmaBox>\r\n    )\r\n}","import styled from 'styled-components'\r\n\r\nexport const ColumnContainer = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    margin-bottom: 5rem;\r\n    text-align: center;\r\n\r\n    h3 { \r\n        font-family: ${({ theme }) => theme.fonts.otherfont}\r\n    }\r\n\r\n    hr {\r\n        width: 66%;\r\n    }\r\n`","import React from 'react'\r\nimport RecentKarma from '../RecentKarma/RecentKarma'\r\nimport ActiveKarma from '../RecentKarma/ActiveKarma'\r\n// CSS components\r\nimport { ColumnContainer } from './ColumnThree.styled'\r\n\r\n// Imports Authorization\r\n\r\n// Allows use for both queries and mutations from our utils folder\r\nimport { useQuery } from '@apollo/client';\r\n\r\n// Gets Queries\r\n// Gets the Karma Post\r\nimport { GET_ME } from '../../../../utils/queries';\r\n\r\n// Imports util functions\r\nconst unDateFormatToUnix = require('../../../../utils/unDateFormatToUnix');\r\n\r\n// Shows recent KarmaPost activity\r\nexport default function ColumnThree({setState}) {\r\n    // Queries recent Karma posts\r\n    // Filters by date created determining if data created it outside scope of 'recent'\r\n    const { loading, data } = useQuery(GET_ME);\r\n\r\n    const meData = data?.me || [];\r\n\r\n    if (!meData) {\r\n        return null;\r\n    }\r\n\r\n    // Displays differently during loading\r\n    if (loading) {\r\n        return <h2>LOADING...</h2>;\r\n    }\r\n\r\n    // Gets array of all the karmapost where ME is a helper\r\n    const karmaHelping = meData?.karmaHelping;\r\n\r\n    // hours variable sets how far in the past the dates will be filtered.\r\n    const hours = 72;\r\n    const pastDate = Date.now() - (1000 * 60 * 60 * hours);\r\n    // Accounts for user time zone, which needs to be accounted for from the dateFormat Function\r\n    const timeZoneOffSet = new Date(Date.now()).getTimezoneOffset()/60;\r\n\r\n    // Filters a new array based on recent karma received and recent karmaPosts helping\r\n    const recentKarmaArray = karmaHelping.filter((post) => unDateFormatToUnix(post.createdAt, timeZoneOffSet) > pastDate );\r\n\r\n    const recentKarmaReceivedArray = recentKarmaArray.filter((post) => post.complete === true);\r\n    const recentKarmaHelpingArray = recentKarmaArray.filter((post) => post.complete === false);\r\n\r\n    return (\r\n\r\n        <ColumnContainer>\r\n            {/* Keys are generated with a string plus the index */}\r\n            {/* Recent karma received after the postAuthor Completed the post */}\r\n            <hr />\r\n            <h3>Active</h3>\r\n            \r\n            {recentKarmaHelpingArray.length === 0 &&\r\n                <div>\r\n                    Current joined Karma Posts will appear here.\r\n                </div>\r\n            }\r\n\r\n            {recentKarmaHelpingArray.length > 0 &&\r\n                recentKarmaHelpingArray.map((recentPost, index) =>\r\n                    <ActiveKarma karmaPostData={recentPost} key={`karmahelping${index}`} />\r\n                )\r\n            }\r\n            <hr />\r\n            <h3>Recent</h3>\r\n           \r\n            {recentKarmaReceivedArray.length === 0 &&\r\n                <div>\r\n                    No Karma Received Recently\r\n                </div>}\r\n            {recentKarmaReceivedArray.length > 0 &&\r\n                recentKarmaReceivedArray.map((recentPost, index) =>\r\n                    <RecentKarma karmaPostData={recentPost} key={`karmareceived${index}`} />\r\n                )\r\n            }\r\n            \r\n\r\n        </ColumnContainer>\r\n    )\r\n}","import styled from 'styled-components'\r\n\r\nexport const DashboardContainer = styled.div`\r\n    margin-top: 6rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex: 1 0 auto;\r\n    background-image: url('./assets/images/background.png');\r\n    background-repeat: no-repeat;\r\n    background-position: center;\r\n    background-size: contain;\r\n\r\n    @media only screen and (min-width: 992px) {\r\n        flex-direction: row;\r\n    }\r\n`\r\nexport const Column = styled.div`\r\n    width: 100vw;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n\r\n    @media only screen and (min-width: 992px) {\r\n        width: 25vw;\r\n    }\r\n`\r\n\r\nexport const WideColumn = styled(Column)`\r\n\r\n    @media only screen and (min-width: 992px) {\r\n        width: 50vw;\r\n    }\r\n`\r\n\r\n\r\n\r\n\r\n\r\n// export const KarmaBar = styled.div`\r\n//     height: 1rem;\r\n//     width: 99%;\r\n//     border-radius: 25px;\r\n//     background: rgb(0,161,145);\r\n//     background: linear-gradient(90deg, rgba(0,161,145,1) ${({ Karma }) => Karma }%, rgba(168,94,172,1) ${({ Karma }) => 100 - Karma }%);\r\n//     margin-bottom: 1rem;\r\n// `\r\n","import React, { useState } from 'react'\r\nimport ColumnOne from './components/DashboardColumns/ColumnOne'\r\nimport ColumnTwo from './components/DashboardColumns/ColumnTwo'\r\nimport ColumnThree from './components/DashboardColumns/ColumnThree'\r\n\r\nimport { DashboardContainer, Column, WideColumn } from './Dashboard.styled'\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_USERS_KARMA, GET_ALL_KARMAPOSTS } from '../../utils/queries';\r\n\r\n\r\nexport default function Dashboard({ handlePageChange, isOpen, setIsOpen }) {\r\n    // Get all users karma, so it can be passed to posts and used to display karma of postauthor\r\n    const { data, loading } = useQuery(GET_USERS_KARMA);\r\n    // Get all posts, so it can be passed down to col 2>posts and show posts\r\n    const karmaPosts = useQuery(GET_ALL_KARMAPOSTS);\r\n\r\n    if (!data) {\r\n        return null;\r\n    }\r\n    // Displays differently during loading\r\n    if (loading) {\r\n        return <h2>LOADING...</h2>\r\n    }\r\n\r\n    if (!karmaPosts.data) {\r\n        return null;\r\n    }\r\n\r\n    // Displays differently during loading\r\n    if (karmaPosts.loading) {\r\n        return <h2>LOADING...</h2>;\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <DashboardContainer>\r\n\r\n            <Column>\r\n                <ColumnOne handlePageChange={handlePageChange} />\r\n                <ColumnThree />\r\n            </Column>\r\n\r\n            <WideColumn>\r\n                <ColumnTwo usersKarma={data} karmaPosts={karmaPosts.data.allKarmaPosts} handlePageChange={handlePageChange} isOpen={isOpen} setIsOpen={setIsOpen} />\r\n            </WideColumn>\r\n\r\n            \r\n\r\n        </DashboardContainer>\r\n    )\r\n}","import styled from 'styled-components'\r\n\r\nexport const HomeContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n    margin-top: 1rem;\r\n\r\n    @media only screen and (min-width: 992px) {\r\n        flex-direction: row;\r\n    }\r\n`\r\n\r\nexport const HomeInfoContainer = styled.div`\r\n    margin: 6rem 1rem 0 1rem;\r\n    height: 100%;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    flex: 1 0 auto;\r\n\r\n    @media only screen and (min-width: 992px) {\r\n        width: 66vw;\r\n        margin: 6rem 3rem 0 3rem;\r\n    }\r\n`\r\n","import styled from 'styled-components'\r\n\r\nexport const StyledHomeInfoContainer = styled.div`\r\n    width: 100%;\r\n\r\n    @media only screen and (min-width: 992px) {\r\n        width: 100%;\r\n    }\r\n`\r\n\r\nexport const StyledHeaderContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin: 1rem 2rem;\r\n\r\n    @media only screen and (min-width: 992px) {\r\n        flex-direction: row;\r\n    }\r\n`\r\n\r\nexport const StyledHomeLogo = styled.img`\r\n    max-height: 300;\r\n    margin-bottom: 3rem;\r\n    max-width: 100%;\r\n`\r\n\r\nexport const Rows = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n`\r\n\r\nexport const Row = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    justify-content: space-around;\r\n    height: 50vh;\r\n    width: 90%;\r\n\r\n    p {\r\n        line-height: 1.5;\r\n        font-family: 'Nunito Sans', sans-serif;\r\n        font-size: 18px;\r\n        width: 80%;\r\n        }\r\n\r\n    img {\r\n        margin: 1rem 1rem;\r\n    }\r\n    \r\n    @media only screen and (min-width: 992px) {\r\n        flex-direction: row;\r\n        height: 33vh;\r\n        p {\r\n            height:fit-content;\r\n            width: 50%;\r\n        }\r\n\r\n    }\r\n`\r\n","import React from 'react'\r\nimport {\r\n    StyledHomeInfoContainer,\r\n    StyledHeaderContainer,\r\n    StyledHomeLogo,\r\n    Rows,\r\n    Row\r\n} from './HomeInfo.styled'\r\n\r\nimport { PrettyButton } from '../../../../GlobalComponents/Buttons/PrettyButton.styled'\r\n\r\nexport default function HomeInfo({handlePageChange}) {\r\n\r\n    return (\r\n        <StyledHomeInfoContainer>\r\n            <StyledHeaderContainer>\r\n                <StyledHomeLogo src='./assets/images/logo_karmatic_pretty.png' alt='karmatic logo' />\r\n            </StyledHeaderContainer>\r\n            <hr />\r\n            <Rows>\r\n                <Row>\r\n                    <img src='./assets/images/hands.png' alt='hands shaking' />\r\n                    <p>Karmatic is a hub for communities to come together and help each other by volunteering assistance and posting requests for help. You earn karma by helping your community. Karmatic is a free service designed to make good deeds easier!</p>\r\n                </Row>\r\n                \r\n                <Row>\r\n                <img src='./assets/images/helping.png' alt='helping wheelbarrel' />\r\n                    <p>\r\n                        You start with 100 karma, which you can use to request help, and when you help someone else,  you get DOUBLE the karma they spent.\r\n                    </p>\r\n                </Row>\r\n                <Row>\r\n                <img src='./assets/images/flags.png' alt='waving flags' />\r\n                    <p>\r\n                        You can get help with simple tasks, like mowing the lawn or walking a dog, but you can also get help with tasks requiring extra knowledge, like setting up a wifi network or planting a garden. The karma depends on how much time the tasks takes, and how difficult it is. Sign up now to get started!\r\n                    </p>\r\n                </Row>\r\n                <Row>\r\n                    <p>\r\n                        All you need to do is make a free account, join a community, and request help, or start helping, today!\r\n                    </p>\r\n                    <PrettyButton onClick={() => handlePageChange('SignUp')}>Sign Up</PrettyButton>\r\n                </Row>\r\n            </Rows>\r\n        </StyledHomeInfoContainer>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { HomeContainer, HomeInfoContainer } from './Home.styled'\r\nimport HomeInfo from './components/HomeInfo/HomeInfo'\r\n\r\n// Checks user Auth\r\nimport Auth from '../../utils/auth';\r\n\r\nexport default function Home({ handlePageChange }) {\r\n  if (Auth.loggedIn()) {\r\n    handlePageChange('Dashboard');\r\n  }\r\n  return (\r\n    <HomeContainer>\r\n\r\n      <HomeInfoContainer>\r\n        <HomeInfo handlePageChange={handlePageChange} />\r\n      </HomeInfoContainer>\r\n\r\n    </HomeContainer>\r\n  )\r\n}","import styled from 'styled-components'\r\n\r\nexport const StyledNavContainer = styled.header`\r\n    height: 3rem;\r\n    padding: 1em;\r\n    z-index: 1;\r\n    position: fixed;\r\n    top: 0;\r\n    width: 100%;\r\n    display: flex;\r\n    background-color: ${({ theme }) => theme.colors.darkgrey };\r\n    align-content: center;\r\n    justify-content: flex-end;\r\n\r\n    @media only screen and (min-width: 400px) {\r\n        justify-content: space-between;\r\n        }\r\n\r\n`\r\nexport const StyledNavImage =  styled.img`\r\n    height: 44px;\r\n    cursor: pointer;\r\n\r\n`\r\nexport const DisappearingNavImage = styled(StyledNavImage)`\r\n        display: none;\r\n    @media only screen and (min-width: 400px) {\r\n            display: block;\r\n        }\r\n`\r\n\r\nexport const StyledNavEnd =  styled.div`\r\n    margin-right: 1.5rem;\r\n    display: flex;\r\n    align-items: center;\r\n    \r\n\r\n    a {\r\n        margin-right: 3em;\r\n        border: solid ${({ theme }) => theme.colors.lightgrey } 2px;\r\n        border-radius:30px;\r\n        padding: .6rem;\r\n        text-decoration: none;\r\n        color: ${({ theme }) => theme.colors.lightgrey };\r\n        cursor: pointer;\r\n\r\n    }\r\n\r\n\r\n`\r\n","import React from 'react';\r\nimport { StyledNavImage, StyledNavContainer, StyledNavEnd, DisappearingNavImage } from './Nav.styled';\r\nimport { PrettyButton } from '../Buttons/PrettyButton.styled';\r\nimport auth from '../../utils/auth'\r\n\r\n\r\nexport default function Nav({ currentPage, handlePageChange }) {\r\n    return (\r\n        <StyledNavContainer>\r\n            <DisappearingNavImage onClick={() => handlePageChange('Home')} src='./assets/images/logo_karmatic.png' alt='karmatic logo' />\r\n\r\n            {currentPage === 'Profile' ?\r\n\r\n                <StyledNavEnd>\r\n                    <PrettyButton href='#logout' onClick={auth.logout}>Logout</PrettyButton>\r\n                    <PrettyButton href='#dashboard' onClick={() => handlePageChange('Dashboard')}>Dashboard</PrettyButton>\r\n                    <StyledNavImage src='./assets/images/k_logo.png' alt='karmatic square logo' onClick={() => handlePageChange('Home')} />\r\n                </StyledNavEnd>\r\n\r\n                : currentPage === 'Dashboard' ?\r\n\r\n                    <StyledNavEnd>\r\n                        <PrettyButton href='#profile' onClick={() => handlePageChange('Profile')}>Profile</PrettyButton>\r\n                        <StyledNavImage src='./assets/images/k_logo.png' alt='karmatic square logo' onClick={() => handlePageChange('Home')} />\r\n                    </StyledNavEnd>\r\n\r\n                    : currentPage === 'Login' ?\r\n\r\n                    <StyledNavEnd>\r\n                        <PrettyButton onClick={() => handlePageChange('SignUp')}>Sign Up</PrettyButton>\r\n                        <StyledNavImage onClick={() => handlePageChange('Home')} src='./assets/images/k_logo.png' alt='karmatic square logo' />\r\n                    </StyledNavEnd>\r\n\r\n                    : currentPage === 'SignUp' ?\r\n\r\n                    <StyledNavEnd>\r\n                        <PrettyButton onClick={() => handlePageChange('Login')}>Login</PrettyButton>\r\n                        <StyledNavImage onClick={() => handlePageChange('Home')} src='./assets/images/k_logo.png' alt='karmatic square logo' />\r\n                    </StyledNavEnd>\r\n\r\n                    :\r\n\r\n                    <StyledNavEnd>\r\n                        <PrettyButton onClick={() => handlePageChange('Login')}>Login</PrettyButton>\r\n                        <PrettyButton onClick={() => handlePageChange('SignUp')}>Sign Up</PrettyButton>\r\n                        <StyledNavImage src='./assets/images/k_logo.png' alt='karmatic square logo' />\r\n                    </StyledNavEnd>\r\n\r\n            }\r\n\r\n        </StyledNavContainer>\r\n    )\r\n}","import styled from \"styled-components\";\r\n\r\nexport const StyledFooter = styled.footer`\r\n    width: 100vw;\r\n    font-size:18px;\r\n    color: ${({ theme }) => theme.colors.darkgrey };\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-shrink: 0;\r\n\r\n`\r\nexport const Icons = styled.div`\r\n    margin-top: 2rem;\r\n    img {\r\n        height: 32px;\r\n        margin: 0 .5rem;\r\n    }\r\n    img:hover {\r\n        cursor: pointer;\r\n    }\r\n`\r\n","import React from 'react';\r\nimport { StyledFooter, Icons } from \"./Footer.styled\"\r\n\r\n\r\nexport default function Footer() {\r\n    return (\r\n        <StyledFooter>\r\n            <Icons>\r\n            <img src='./assets/images/instagram.png' alt='instagram icon' />\r\n            <img src='./assets/images/twitter.png' alt='twitter icon' />\r\n            </Icons>\r\n            <p>\r\n            &copy; Karmatic\r\n            </p>\r\n            \r\n\r\n        </StyledFooter>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  ApolloProvider,\r\n  createHttpLink,\r\n} from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\n\r\nimport { GlobalStyles } from './GlobalStyles';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport Login from './pages/LoginSignup/Login';\r\nimport SignUp from './pages/LoginSignup/SignUp'\r\nimport Profile from './pages/Profile/Profile';\r\nimport Dashboard from './pages/Dashboard/Dashboard'\r\nimport Home from './pages/Home/Home';\r\nimport Nav from './GlobalComponents/Nav/Nav';\r\nimport Footer from \"./GlobalComponents/Footer/Footer\"\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: '/graphql',\r\n});\r\n\r\n// FOR AUTH\r\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\r\nconst authLink = setContext((_, { headers }) => {\r\n  // get the authentication token from local storage if it exists\r\n  const token = localStorage.getItem('id_token');\r\n  // return the headers to the context so httpLink can read them\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : '',\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nconst theme = {\r\n  colors: {\r\n    darkteal: '#00A191',\r\n    teal: '#5EACA4',\r\n    lightteal: '#B1DCD8',\r\n    purple: '#E2B4E5',\r\n    lightpurple: '#E0B9B9',\r\n    darkpurple: '#A85EAC',\r\n    lightgrey: '#E9E9E9',\r\n    darkgrey: '#4A5655',\r\n  },\r\n  fonts: {\r\n    otherfont: 'Nunito Sans'\r\n  }\r\n}\r\n\r\nexport default function App() {\r\n  \r\n  // Determines if the Modal for edit post should open\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  // Logic to have app follow the current page being displayed\r\n  const [currentPage, setCurrentPage] = useState('Home');\r\n  const [accessPage, setCurrentAccessPage] = useState('Login')\r\n  const handlePageChange = (page) => setCurrentPage(page);\r\n  \r\n  // Renders current page based on user login\r\n  const renderCurrentPage = () => {\r\n    if (currentPage === 'Profile') {\r\n\r\n      return <Profile/>;\r\n    }\r\n    if (currentPage === 'Dashboard') {\r\n      return <Dashboard handlePageChange={handlePageChange} isOpen={isOpen} setIsOpen={setIsOpen} />;\r\n    }\r\n    if (currentPage === 'Login') {\r\n      return <Login handlePageChange={handlePageChange} />;\r\n    }\r\n    if (currentPage === 'SignUp') {\r\n      return <SignUp handlePageChange={handlePageChange} />;\r\n    }\r\n      return <Home handlePageChange={handlePageChange} />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <ApolloProvider client={client}>\r\n\r\n      <ThemeProvider theme={theme}>\r\n        <GlobalStyles />\r\n        <Nav currentPage={currentPage} handlePageChange={handlePageChange} accessPage={accessPage} setCurrentAccessPage={setCurrentAccessPage} />\r\n        {renderCurrentPage()}\r\n        <Footer />\r\n      </ThemeProvider>\r\n    </ApolloProvider>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}